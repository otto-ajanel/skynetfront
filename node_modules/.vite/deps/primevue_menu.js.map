{
  "version": 3,
  "sources": ["../../src/menu/style/MenuStyle.js", "../../src/menu/BaseMenu.vue", "../../src/menu/Menuitem.vue", "../../src/menu/Menuitem.vue?vue&type=template&id=0740f09a&lang.js", "../../src/menu/Menu.vue", "../../src/menu/Menu.vue?vue&type=template&id=739e6f93&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-menu {\n    background: ${dt('menu.background')};\n    color: ${dt('menu.color')};\n    border: 1px solid ${dt('menu.border.color')};\n    border-radius: ${dt('menu.border.radius')};\n    min-width: 12.5rem;\n}\n\n.p-menu-list {\n    margin: 0;\n    padding: ${dt('menu.list.padding')};\n    outline: 0 none;\n    list-style: none;\n    display: flex;\n    flex-direction: column;\n    gap: ${dt('menu.list.gap')};\n}\n\n.p-menu-item-content {\n    transition: background ${dt('menu.transition.duration')}, color ${dt('menu.transition.duration')};\n    border-radius: ${dt('menu.item.border.radius')};\n    color: ${dt('menu.item.color')};\n}\n\n.p-menu-item-link {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    text-decoration: none;\n    overflow: hidden;\n    position: relative;\n    color: inherit;\n    padding: ${dt('menu.item.padding')};\n    gap: ${dt('menu.item.gap')};\n    user-select: none;\n    outline: 0 none;\n}\n\n.p-menu-item-label {\n    line-height: 1;\n}\n\n.p-menu-item-icon {\n    color: ${dt('menu.item.icon.color')};\n}\n\n.p-menu-item.p-focus .p-menu-item-content {\n    color: ${dt('menu.item.focus.color')};\n    background: ${dt('menu.item.focus.background')};\n}\n\n.p-menu-item.p-focus .p-menu-item-icon {\n    color: ${dt('menu.item.icon.focus.color')};\n}\n\n.p-menu-item:not(.p-disabled) .p-menu-item-content:hover {\n    color: ${dt('menu.item.focus.color')};\n    background: ${dt('menu.item.focus.background')};\n}\n\n.p-menu-item:not(.p-disabled) .p-menu-item-content:hover .p-menu-item-icon {\n    color: ${dt('menu.item.icon.focus.color')};\n}\n\n.p-menu-overlay {\n    box-shadow: ${dt('menu.shadow')};\n}\n\n.p-menu-submenu-label {\n    background: ${dt('menu.submenu.label.background')};\n    padding: ${dt('menu.submenu.label.padding')};\n    color: ${dt('menu.submenu.label.color')};\n    font-weight: ${dt('menu.submenu.label.font.weight')};\n}\n\n.p-menu-separator {\n    border-top: 1px solid ${dt('menu.separator.border.color')};\n}\n`;\n\nconst classes = {\n    root: ({ props }) => [\n        'p-menu p-component',\n        {\n            'p-menu-overlay': props.popup\n        }\n    ],\n    start: 'p-menu-start',\n    list: 'p-menu-list',\n    submenuLabel: 'p-menu-submenu-label',\n    separator: 'p-menu-separator',\n    end: 'p-menu-end',\n    item: ({ instance }) => [\n        'p-menu-item',\n        {\n            'p-focus': instance.id === instance.focusedOptionId,\n            'p-disabled': instance.disabled()\n        }\n    ],\n    itemContent: 'p-menu-item-content',\n    itemLink: 'p-menu-item-link',\n    itemIcon: 'p-menu-item-icon',\n    itemLabel: 'p-menu-item-label'\n};\n\nexport default BaseStyle.extend({\n    name: 'menu',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport MenuStyle from 'primevue/menu/style';\n\nexport default {\n    name: 'BaseMenu',\n    extends: BaseComponent,\n    props: {\n        popup: {\n            type: Boolean,\n            default: false\n        },\n        model: {\n            type: Array,\n            default: null\n        },\n        appendTo: {\n            type: [String, Object],\n            default: 'body'\n        },\n        autoZIndex: {\n            type: Boolean,\n            default: true\n        },\n        baseZIndex: {\n            type: Number,\n            default: 0\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        }\n    },\n    style: MenuStyle,\n    provide() {\n        return {\n            $pcMenu: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <li\n        v-if=\"visible()\"\n        :id=\"id\"\n        :class=\"[cx('item'), item.class]\"\n        role=\"menuitem\"\n        :style=\"item.style\"\n        :aria-label=\"label()\"\n        :aria-disabled=\"disabled()\"\n        v-bind=\"getPTOptions('item')\"\n        :data-p-focused=\"isItemFocused()\"\n        :data-p-disabled=\"disabled() || false\"\n    >\n        <div :class=\"cx('itemContent')\" @click=\"onItemClick($event)\" @mousemove=\"onItemMouseMove($event)\" v-bind=\"getPTOptions('itemContent')\">\n            <template v-if=\"!templates.item\">\n                <a v-ripple :href=\"item.url\" :class=\"cx('itemLink')\" :target=\"item.target\" tabindex=\"-1\" aria-hidden=\"true\" v-bind=\"getPTOptions('itemLink')\">\n                    <component v-if=\"templates.itemicon\" :is=\"templates.itemicon\" :item=\"item\" :class=\"cx('itemIcon')\" />\n                    <span v-else-if=\"item.icon\" :class=\"[cx('itemIcon'), item.icon]\" v-bind=\"getPTOptions('itemIcon')\" />\n                    <span :class=\"cx('itemLabel')\" v-bind=\"getPTOptions('itemLabel')\">{{ label() }}</span>\n                </a>\n            </template>\n            <component v-else-if=\"templates.item\" :is=\"templates.item\" :item=\"item\" :label=\"label()\" :props=\"getMenuItemProps(item)\"></component>\n        </div>\n    </li>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { ObjectUtils } from '@primevue/core/utils';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'Menuitem',\n    hostName: 'Menu',\n    extends: BaseComponent,\n    inheritAttrs: false,\n    emits: ['item-click', 'item-mousemove'],\n    props: {\n        item: null,\n        templates: null,\n        id: null,\n        focusedOptionId: null,\n        index: null\n    },\n    methods: {\n        getItemProp(processedItem, name) {\n            return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name]) : undefined;\n        },\n        getPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    item: this.item,\n                    index: this.index,\n                    focused: this.isItemFocused(),\n                    disabled: this.disabled()\n                }\n            });\n        },\n        isItemFocused() {\n            return this.focusedOptionId === this.id;\n        },\n        onItemClick(event) {\n            const command = this.getItemProp(this.item, 'command');\n\n            command && command({ originalEvent: event, item: this.item.item });\n            this.$emit('item-click', { originalEvent: event, item: this.item, id: this.id });\n        },\n        onItemMouseMove(event) {\n            this.$emit('item-mousemove', { originalEvent: event, item: this.item, id: this.id });\n        },\n        visible() {\n            return typeof this.item.visible === 'function' ? this.item.visible() : this.item.visible !== false;\n        },\n        disabled() {\n            return typeof this.item.disabled === 'function' ? this.item.disabled() : this.item.disabled;\n        },\n        label() {\n            return typeof this.item.label === 'function' ? this.item.label() : this.item.label;\n        },\n        getMenuItemProps(item) {\n            return {\n                action: mergeProps(\n                    {\n                        class: this.cx('itemLink'),\n                        tabindex: '-1',\n                        'aria-hidden': true\n                    },\n                    this.getPTOptions('itemLink')\n                ),\n                icon: mergeProps(\n                    {\n                        class: [this.cx('itemIcon'), item.icon]\n                    },\n                    this.getPTOptions('itemIcon')\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('itemLabel')\n                    },\n                    this.getPTOptions('itemLabel')\n                )\n            };\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <li\n        v-if=\"visible()\"\n        :id=\"id\"\n        :class=\"[cx('item'), item.class]\"\n        role=\"menuitem\"\n        :style=\"item.style\"\n        :aria-label=\"label()\"\n        :aria-disabled=\"disabled()\"\n        v-bind=\"getPTOptions('item')\"\n        :data-p-focused=\"isItemFocused()\"\n        :data-p-disabled=\"disabled() || false\"\n    >\n        <div :class=\"cx('itemContent')\" @click=\"onItemClick($event)\" @mousemove=\"onItemMouseMove($event)\" v-bind=\"getPTOptions('itemContent')\">\n            <template v-if=\"!templates.item\">\n                <a v-ripple :href=\"item.url\" :class=\"cx('itemLink')\" :target=\"item.target\" tabindex=\"-1\" aria-hidden=\"true\" v-bind=\"getPTOptions('itemLink')\">\n                    <component v-if=\"templates.itemicon\" :is=\"templates.itemicon\" :item=\"item\" :class=\"cx('itemIcon')\" />\n                    <span v-else-if=\"item.icon\" :class=\"[cx('itemIcon'), item.icon]\" v-bind=\"getPTOptions('itemIcon')\" />\n                    <span :class=\"cx('itemLabel')\" v-bind=\"getPTOptions('itemLabel')\">{{ label() }}</span>\n                </a>\n            </template>\n            <component v-else-if=\"templates.item\" :is=\"templates.item\" :item=\"item\" :label=\"label()\" :props=\"getMenuItemProps(item)\"></component>\n        </div>\n    </li>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { ObjectUtils } from '@primevue/core/utils';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'Menuitem',\n    hostName: 'Menu',\n    extends: BaseComponent,\n    inheritAttrs: false,\n    emits: ['item-click', 'item-mousemove'],\n    props: {\n        item: null,\n        templates: null,\n        id: null,\n        focusedOptionId: null,\n        index: null\n    },\n    methods: {\n        getItemProp(processedItem, name) {\n            return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name]) : undefined;\n        },\n        getPTOptions(key) {\n            return this.ptm(key, {\n                context: {\n                    item: this.item,\n                    index: this.index,\n                    focused: this.isItemFocused(),\n                    disabled: this.disabled()\n                }\n            });\n        },\n        isItemFocused() {\n            return this.focusedOptionId === this.id;\n        },\n        onItemClick(event) {\n            const command = this.getItemProp(this.item, 'command');\n\n            command && command({ originalEvent: event, item: this.item.item });\n            this.$emit('item-click', { originalEvent: event, item: this.item, id: this.id });\n        },\n        onItemMouseMove(event) {\n            this.$emit('item-mousemove', { originalEvent: event, item: this.item, id: this.id });\n        },\n        visible() {\n            return typeof this.item.visible === 'function' ? this.item.visible() : this.item.visible !== false;\n        },\n        disabled() {\n            return typeof this.item.disabled === 'function' ? this.item.disabled() : this.item.disabled;\n        },\n        label() {\n            return typeof this.item.label === 'function' ? this.item.label() : this.item.label;\n        },\n        getMenuItemProps(item) {\n            return {\n                action: mergeProps(\n                    {\n                        class: this.cx('itemLink'),\n                        tabindex: '-1',\n                        'aria-hidden': true\n                    },\n                    this.getPTOptions('itemLink')\n                ),\n                icon: mergeProps(\n                    {\n                        class: [this.cx('itemIcon'), item.icon]\n                    },\n                    this.getPTOptions('itemIcon')\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('itemLabel')\n                    },\n                    this.getPTOptions('itemLabel')\n                )\n            };\n        }\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <Portal :appendTo=\"appendTo\" :disabled=\"!popup\">\n        <transition name=\"p-connected-overlay\" @enter=\"onEnter\" @leave=\"onLeave\" @after-leave=\"onAfterLeave\" v-bind=\"ptm('transition')\">\n            <div v-if=\"popup ? overlayVisible : true\" :ref=\"containerRef\" :id=\"id\" :class=\"cx('root')\" @click=\"onOverlayClick\" v-bind=\"ptmi('root')\">\n                <div v-if=\"$slots.start\" :class=\"cx('start')\" v-bind=\"ptm('start')\">\n                    <slot name=\"start\"></slot>\n                </div>\n                <ul\n                    :ref=\"listRef\"\n                    :id=\"id + '_list'\"\n                    :class=\"cx('list')\"\n                    role=\"menu\"\n                    :tabindex=\"tabindex\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    @focus=\"onListFocus\"\n                    @blur=\"onListBlur\"\n                    @keydown=\"onListKeyDown\"\n                    v-bind=\"ptm('list')\"\n                >\n                    <template v-for=\"(item, i) of model\" :key=\"label(item) + i.toString()\">\n                        <template v-if=\"item.items && visible(item) && !item.separator\">\n                            <li v-if=\"item.items\" :id=\"id + '_' + i\" :class=\"[cx('submenuLabel'), item.class]\" role=\"none\" v-bind=\"ptm('submenuLabel')\">\n                                <!--TODO: submenuheader deprecated since v4.0. Use submenulabel-->\n                                <slot :name=\"$slots.submenulabel ? 'submenulabel' : 'submenuheader'\" :item=\"item\">{{ label(item) }}</slot>\n                            </li>\n                            <template v-for=\"(child, j) of item.items\" :key=\"child.label + i + '_' + j\">\n                                <PVMenuitem\n                                    v-if=\"visible(child) && !child.separator\"\n                                    :id=\"id + '_' + i + '_' + j\"\n                                    :item=\"child\"\n                                    :templates=\"$slots\"\n                                    :focusedOptionId=\"focusedOptionId\"\n                                    :unstyled=\"unstyled\"\n                                    @item-click=\"itemClick\"\n                                    @item-mousemove=\"itemMouseMove\"\n                                    :pt=\"pt\"\n                                />\n                                <li v-else-if=\"visible(child) && child.separator\" :key=\"'separator' + i + j\" :class=\"[cx('separator'), item.class]\" :style=\"child.style\" role=\"separator\" v-bind=\"ptm('separator')\"></li>\n                            </template>\n                        </template>\n                        <li v-else-if=\"visible(item) && item.separator\" :key=\"'separator' + i.toString()\" :class=\"[cx('separator'), item.class]\" :style=\"item.style\" role=\"separator\" v-bind=\"ptm('separator')\"></li>\n                        <PVMenuitem\n                            v-else\n                            :key=\"label(item) + i.toString()\"\n                            :id=\"id + '_' + i\"\n                            :item=\"item\"\n                            :index=\"i\"\n                            :templates=\"$slots\"\n                            :focusedOptionId=\"focusedOptionId\"\n                            :unstyled=\"unstyled\"\n                            @item-click=\"itemClick\"\n                            @item-mousemove=\"itemMouseMove\"\n                            :pt=\"pt\"\n                        />\n                    </template>\n                </ul>\n                <div v-if=\"$slots.end\" :class=\"cx('end')\" v-bind=\"ptm('end')\">\n                    <slot name=\"end\"></slot>\n                </div>\n            </div>\n        </transition>\n    </Portal>\n</template>\n\n<script>\nimport { ConnectedOverlayScrollHandler, DomHandler, UniqueComponentId, ZIndexUtils } from '@primevue/core/utils';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport BaseMenu from './BaseMenu.vue';\nimport Menuitem from './Menuitem.vue';\n\nexport default {\n    name: 'Menu',\n    extends: BaseMenu,\n    inheritAttrs: false,\n    emits: ['show', 'hide', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            overlayVisible: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            selectedOptionIndex: -1\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    target: null,\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    container: null,\n    list: null,\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n\n        if (!this.popup) {\n            this.bindResizeListener();\n            this.bindOutsideClickListener();\n        }\n    },\n    beforeUnmount() {\n        this.unbindResizeListener();\n        this.unbindOutsideClickListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        this.target = null;\n\n        if (this.container && this.autoZIndex) {\n            ZIndexUtils.clear(this.container);\n        }\n\n        this.container = null;\n    },\n    methods: {\n        itemClick(event) {\n            const item = event.item;\n\n            if (this.disabled(item)) {\n                return;\n            }\n\n            if (item.command) {\n                item.command(event);\n            }\n\n            if (this.overlayVisible) this.hide();\n\n            if (!this.popup && this.focusedOptionIndex !== event.id) {\n                this.focusedOptionIndex = event.id;\n            }\n        },\n        itemMouseMove(event) {\n            if (this.focused) {\n                this.focusedOptionIndex = event.id;\n            }\n        },\n        onListFocus(event) {\n            this.focused = true;\n            !this.popup && this.changeFocusedOptionIndex(0);\n\n            this.$emit('focus', event);\n        },\n        onListBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n        },\n        onListKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Escape':\n                    if (this.popup) {\n                        DomHandler.focus(this.target);\n                        this.hide();\n                    }\n\n                case 'Tab':\n                    this.overlayVisible && this.hide();\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const optionIndex = this.findNextOptionIndex(this.focusedOptionIndex);\n\n            this.changeFocusedOptionIndex(optionIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (event.altKey && this.popup) {\n                DomHandler.focus(this.target);\n                this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.findPrevOptionIndex(this.focusedOptionIndex);\n\n                this.changeFocusedOptionIndex(optionIndex);\n                event.preventDefault();\n            }\n        },\n        onHomeKey(event) {\n            this.changeFocusedOptionIndex(0);\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            this.changeFocusedOptionIndex(DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]').length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            const element = DomHandler.findSingle(this.list, `li[id=\"${`${this.focusedOptionIndex}`}\"]`);\n            const anchorElement = element && DomHandler.findSingle(element, 'a[data-pc-section=\"itemlink\"]');\n\n            this.popup && DomHandler.focus(this.target);\n            anchorElement ? anchorElement.click() : element && element.click();\n\n            event.preventDefault();\n        },\n        onSpaceKey(event) {\n            this.onEnterKey(event);\n        },\n        findNextOptionIndex(index) {\n            const links = DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]');\n            const matchedOptionIndex = [...links].findIndex((link) => link.id === index);\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + 1 : 0;\n        },\n        findPrevOptionIndex(index) {\n            const links = DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]');\n            const matchedOptionIndex = [...links].findIndex((link) => link.id === index);\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex - 1 : 0;\n        },\n        changeFocusedOptionIndex(index) {\n            const links = DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]');\n            let order = index >= links.length ? links.length - 1 : index < 0 ? 0 : index;\n\n            order > -1 && (this.focusedOptionIndex = links[order].getAttribute('id'));\n        },\n        toggle(event) {\n            if (this.overlayVisible) this.hide();\n            else this.show(event);\n        },\n        show(event) {\n            this.overlayVisible = true;\n            this.target = event.currentTarget;\n        },\n        hide() {\n            this.overlayVisible = false;\n            this.target = null;\n        },\n        onEnter(el) {\n            DomHandler.addStyles(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.bindOutsideClickListener();\n            this.bindResizeListener();\n            this.bindScrollListener();\n\n            if (this.autoZIndex) {\n                ZIndexUtils.set('menu', el, this.baseZIndex + this.$primevue.config.zIndex.menu);\n            }\n\n            if (this.popup) {\n                DomHandler.focus(this.list);\n            }\n\n            this.$emit('show');\n        },\n        onLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindResizeListener();\n            this.unbindScrollListener();\n            this.$emit('hide');\n        },\n        onAfterLeave(el) {\n            if (this.autoZIndex) {\n                ZIndexUtils.clear(el);\n            }\n        },\n        alignOverlay() {\n            DomHandler.absolutePosition(this.container, this.target);\n            const targetWidth = DomHandler.getOuterWidth(this.target);\n\n            if (targetWidth > DomHandler.getOuterWidth(this.container)) {\n                this.container.style.minWidth = DomHandler.getOuterWidth(this.target) + 'px';\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    const isOutsideContainer = this.container && !this.container.contains(event.target);\n                    const isOutsideTarget = !(this.target && (this.target === event.target || this.target.contains(event.target)));\n\n                    if (this.overlayVisible && isOutsideContainer && isOutsideTarget) {\n                        this.hide();\n                    } else if (!this.popup && isOutsideContainer && isOutsideTarget) {\n                        this.focusedOptionIndex = -1;\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        visible(item) {\n            return typeof item.visible === 'function' ? item.visible() : item.visible !== false;\n        },\n        disabled(item) {\n            return typeof item.disabled === 'function' ? item.disabled() : item.disabled;\n        },\n        label(item) {\n            return typeof item.label === 'function' ? item.label() : item.label;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.target\n            });\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        listRef(el) {\n            this.list = el;\n        }\n    },\n    computed: {\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : null;\n        }\n    },\n    components: {\n        PVMenuitem: Menuitem,\n        Portal: Portal\n    }\n};\n</script>\n", "<template>\n    <Portal :appendTo=\"appendTo\" :disabled=\"!popup\">\n        <transition name=\"p-connected-overlay\" @enter=\"onEnter\" @leave=\"onLeave\" @after-leave=\"onAfterLeave\" v-bind=\"ptm('transition')\">\n            <div v-if=\"popup ? overlayVisible : true\" :ref=\"containerRef\" :id=\"id\" :class=\"cx('root')\" @click=\"onOverlayClick\" v-bind=\"ptmi('root')\">\n                <div v-if=\"$slots.start\" :class=\"cx('start')\" v-bind=\"ptm('start')\">\n                    <slot name=\"start\"></slot>\n                </div>\n                <ul\n                    :ref=\"listRef\"\n                    :id=\"id + '_list'\"\n                    :class=\"cx('list')\"\n                    role=\"menu\"\n                    :tabindex=\"tabindex\"\n                    :aria-activedescendant=\"focused ? focusedOptionId : undefined\"\n                    :aria-label=\"ariaLabel\"\n                    :aria-labelledby=\"ariaLabelledby\"\n                    @focus=\"onListFocus\"\n                    @blur=\"onListBlur\"\n                    @keydown=\"onListKeyDown\"\n                    v-bind=\"ptm('list')\"\n                >\n                    <template v-for=\"(item, i) of model\" :key=\"label(item) + i.toString()\">\n                        <template v-if=\"item.items && visible(item) && !item.separator\">\n                            <li v-if=\"item.items\" :id=\"id + '_' + i\" :class=\"[cx('submenuLabel'), item.class]\" role=\"none\" v-bind=\"ptm('submenuLabel')\">\n                                <!--TODO: submenuheader deprecated since v4.0. Use submenulabel-->\n                                <slot :name=\"$slots.submenulabel ? 'submenulabel' : 'submenuheader'\" :item=\"item\">{{ label(item) }}</slot>\n                            </li>\n                            <template v-for=\"(child, j) of item.items\" :key=\"child.label + i + '_' + j\">\n                                <PVMenuitem\n                                    v-if=\"visible(child) && !child.separator\"\n                                    :id=\"id + '_' + i + '_' + j\"\n                                    :item=\"child\"\n                                    :templates=\"$slots\"\n                                    :focusedOptionId=\"focusedOptionId\"\n                                    :unstyled=\"unstyled\"\n                                    @item-click=\"itemClick\"\n                                    @item-mousemove=\"itemMouseMove\"\n                                    :pt=\"pt\"\n                                />\n                                <li v-else-if=\"visible(child) && child.separator\" :key=\"'separator' + i + j\" :class=\"[cx('separator'), item.class]\" :style=\"child.style\" role=\"separator\" v-bind=\"ptm('separator')\"></li>\n                            </template>\n                        </template>\n                        <li v-else-if=\"visible(item) && item.separator\" :key=\"'separator' + i.toString()\" :class=\"[cx('separator'), item.class]\" :style=\"item.style\" role=\"separator\" v-bind=\"ptm('separator')\"></li>\n                        <PVMenuitem\n                            v-else\n                            :key=\"label(item) + i.toString()\"\n                            :id=\"id + '_' + i\"\n                            :item=\"item\"\n                            :index=\"i\"\n                            :templates=\"$slots\"\n                            :focusedOptionId=\"focusedOptionId\"\n                            :unstyled=\"unstyled\"\n                            @item-click=\"itemClick\"\n                            @item-mousemove=\"itemMouseMove\"\n                            :pt=\"pt\"\n                        />\n                    </template>\n                </ul>\n                <div v-if=\"$slots.end\" :class=\"cx('end')\" v-bind=\"ptm('end')\">\n                    <slot name=\"end\"></slot>\n                </div>\n            </div>\n        </transition>\n    </Portal>\n</template>\n\n<script>\nimport { ConnectedOverlayScrollHandler, DomHandler, UniqueComponentId, ZIndexUtils } from '@primevue/core/utils';\nimport OverlayEventBus from 'primevue/overlayeventbus';\nimport Portal from 'primevue/portal';\nimport BaseMenu from './BaseMenu.vue';\nimport Menuitem from './Menuitem.vue';\n\nexport default {\n    name: 'Menu',\n    extends: BaseMenu,\n    inheritAttrs: false,\n    emits: ['show', 'hide', 'focus', 'blur'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            overlayVisible: false,\n            focused: false,\n            focusedOptionIndex: -1,\n            selectedOptionIndex: -1\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    target: null,\n    outsideClickListener: null,\n    scrollHandler: null,\n    resizeListener: null,\n    container: null,\n    list: null,\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n\n        if (!this.popup) {\n            this.bindResizeListener();\n            this.bindOutsideClickListener();\n        }\n    },\n    beforeUnmount() {\n        this.unbindResizeListener();\n        this.unbindOutsideClickListener();\n\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n\n        this.target = null;\n\n        if (this.container && this.autoZIndex) {\n            ZIndexUtils.clear(this.container);\n        }\n\n        this.container = null;\n    },\n    methods: {\n        itemClick(event) {\n            const item = event.item;\n\n            if (this.disabled(item)) {\n                return;\n            }\n\n            if (item.command) {\n                item.command(event);\n            }\n\n            if (this.overlayVisible) this.hide();\n\n            if (!this.popup && this.focusedOptionIndex !== event.id) {\n                this.focusedOptionIndex = event.id;\n            }\n        },\n        itemMouseMove(event) {\n            if (this.focused) {\n                this.focusedOptionIndex = event.id;\n            }\n        },\n        onListFocus(event) {\n            this.focused = true;\n            !this.popup && this.changeFocusedOptionIndex(0);\n\n            this.$emit('focus', event);\n        },\n        onListBlur(event) {\n            this.focused = false;\n            this.focusedOptionIndex = -1;\n            this.$emit('blur', event);\n        },\n        onListKeyDown(event) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Escape':\n                    if (this.popup) {\n                        DomHandler.focus(this.target);\n                        this.hide();\n                    }\n\n                case 'Tab':\n                    this.overlayVisible && this.hide();\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const optionIndex = this.findNextOptionIndex(this.focusedOptionIndex);\n\n            this.changeFocusedOptionIndex(optionIndex);\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            if (event.altKey && this.popup) {\n                DomHandler.focus(this.target);\n                this.hide();\n                event.preventDefault();\n            } else {\n                const optionIndex = this.findPrevOptionIndex(this.focusedOptionIndex);\n\n                this.changeFocusedOptionIndex(optionIndex);\n                event.preventDefault();\n            }\n        },\n        onHomeKey(event) {\n            this.changeFocusedOptionIndex(0);\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            this.changeFocusedOptionIndex(DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]').length - 1);\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            const element = DomHandler.findSingle(this.list, `li[id=\"${`${this.focusedOptionIndex}`}\"]`);\n            const anchorElement = element && DomHandler.findSingle(element, 'a[data-pc-section=\"itemlink\"]');\n\n            this.popup && DomHandler.focus(this.target);\n            anchorElement ? anchorElement.click() : element && element.click();\n\n            event.preventDefault();\n        },\n        onSpaceKey(event) {\n            this.onEnterKey(event);\n        },\n        findNextOptionIndex(index) {\n            const links = DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]');\n            const matchedOptionIndex = [...links].findIndex((link) => link.id === index);\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex + 1 : 0;\n        },\n        findPrevOptionIndex(index) {\n            const links = DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]');\n            const matchedOptionIndex = [...links].findIndex((link) => link.id === index);\n\n            return matchedOptionIndex > -1 ? matchedOptionIndex - 1 : 0;\n        },\n        changeFocusedOptionIndex(index) {\n            const links = DomHandler.find(this.container, 'li[data-pc-section=\"item\"][data-p-disabled=\"false\"]');\n            let order = index >= links.length ? links.length - 1 : index < 0 ? 0 : index;\n\n            order > -1 && (this.focusedOptionIndex = links[order].getAttribute('id'));\n        },\n        toggle(event) {\n            if (this.overlayVisible) this.hide();\n            else this.show(event);\n        },\n        show(event) {\n            this.overlayVisible = true;\n            this.target = event.currentTarget;\n        },\n        hide() {\n            this.overlayVisible = false;\n            this.target = null;\n        },\n        onEnter(el) {\n            DomHandler.addStyles(el, { position: 'absolute', top: '0', left: '0' });\n            this.alignOverlay();\n            this.bindOutsideClickListener();\n            this.bindResizeListener();\n            this.bindScrollListener();\n\n            if (this.autoZIndex) {\n                ZIndexUtils.set('menu', el, this.baseZIndex + this.$primevue.config.zIndex.menu);\n            }\n\n            if (this.popup) {\n                DomHandler.focus(this.list);\n            }\n\n            this.$emit('show');\n        },\n        onLeave() {\n            this.unbindOutsideClickListener();\n            this.unbindResizeListener();\n            this.unbindScrollListener();\n            this.$emit('hide');\n        },\n        onAfterLeave(el) {\n            if (this.autoZIndex) {\n                ZIndexUtils.clear(el);\n            }\n        },\n        alignOverlay() {\n            DomHandler.absolutePosition(this.container, this.target);\n            const targetWidth = DomHandler.getOuterWidth(this.target);\n\n            if (targetWidth > DomHandler.getOuterWidth(this.container)) {\n                this.container.style.minWidth = DomHandler.getOuterWidth(this.target) + 'px';\n            }\n        },\n        bindOutsideClickListener() {\n            if (!this.outsideClickListener) {\n                this.outsideClickListener = (event) => {\n                    const isOutsideContainer = this.container && !this.container.contains(event.target);\n                    const isOutsideTarget = !(this.target && (this.target === event.target || this.target.contains(event.target)));\n\n                    if (this.overlayVisible && isOutsideContainer && isOutsideTarget) {\n                        this.hide();\n                    } else if (!this.popup && isOutsideContainer && isOutsideTarget) {\n                        this.focusedOptionIndex = -1;\n                    }\n                };\n\n                document.addEventListener('click', this.outsideClickListener);\n            }\n        },\n        unbindOutsideClickListener() {\n            if (this.outsideClickListener) {\n                document.removeEventListener('click', this.outsideClickListener);\n                this.outsideClickListener = null;\n            }\n        },\n        bindScrollListener() {\n            if (!this.scrollHandler) {\n                this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                    if (this.overlayVisible) {\n                        this.hide();\n                    }\n                });\n            }\n\n            this.scrollHandler.bindScrollListener();\n        },\n        unbindScrollListener() {\n            if (this.scrollHandler) {\n                this.scrollHandler.unbindScrollListener();\n            }\n        },\n        bindResizeListener() {\n            if (!this.resizeListener) {\n                this.resizeListener = () => {\n                    if (this.overlayVisible && !DomHandler.isTouchDevice()) {\n                        this.hide();\n                    }\n                };\n\n                window.addEventListener('resize', this.resizeListener);\n            }\n        },\n        unbindResizeListener() {\n            if (this.resizeListener) {\n                window.removeEventListener('resize', this.resizeListener);\n                this.resizeListener = null;\n            }\n        },\n        visible(item) {\n            return typeof item.visible === 'function' ? item.visible() : item.visible !== false;\n        },\n        disabled(item) {\n            return typeof item.disabled === 'function' ? item.disabled() : item.disabled;\n        },\n        label(item) {\n            return typeof item.label === 'function' ? item.label() : item.label;\n        },\n        onOverlayClick(event) {\n            OverlayEventBus.emit('overlay-click', {\n                originalEvent: event,\n                target: this.target\n            });\n        },\n        containerRef(el) {\n            this.container = el;\n        },\n        listRef(el) {\n            this.list = el;\n        }\n    },\n    computed: {\n        focusedOptionId() {\n            return this.focusedOptionIndex !== -1 ? this.focusedOptionIndex : null;\n        }\n    },\n    components: {\n        PVMenuitem: Menuitem,\n        Portal: Portal\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "popup", "start", "list", "submenuLabel", "separator", "end", "item", "_ref3", "instance", "id", "focusedOptionId", "disabled", "itemContent", "itemLink", "itemIcon", "itemLabel", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "popup", "type", "Boolean", "model", "Array", "appendTo", "String", "Object", "autoZIndex", "baseZIndex", "Number", "tabindex", "ariaLabel", "ariaLabelledby", "style", "MenuStyle", "provide", "$pcMenu", "$parentInstance", "hostName", "inheritAttrs", "emits", "item", "templates", "id", "focusedOptionId", "index", "methods", "getItemProp", "processedItem", "ObjectUtils", "getItemValue", "undefined", "getPTOptions", "key", "ptm", "context", "focused", "isItemFocused", "disabled", "onItemClick", "event", "command", "originalEvent", "$emit", "onItemMouseMove", "visible", "label", "getMenuItemProps", "action", "mergeProps", "cx", "icon", "directives", "ripple", "Ripple", "$options", "_openBlock", "_createElementBlock", "_mergeProps", "$props", "_ctx", "role", "_createElementVNode", "onClick", "_cache", "$event", "onMousemove", "_withDirectives", "href", "url", "target", "itemicon", "_createBlock", "_resolveDynamicComponent", "script", "BaseMenu", "data", "$attrs", "overlayVisible", "focusedOptionIndex", "selectedOptionIndex", "watch", "$attrsId", "newValue", "UniqueComponentId", "outsideClickListener", "scrollHandler", "resizeListener", "container", "list", "mounted", "bindResizeListener", "bindOutsideClickListener", "beforeUnmount", "unbindResizeListener", "unbindOutsideClickListener", "destroy", "ZIndexUtils", "clear", "itemClick", "hide", "itemMouseMove", "onListFocus", "changeFocusedOptionIndex", "onListBlur", "onListKeyDown", "code", "onArrowDownKey", "onArrowUpKey", "onHomeKey", "onEndKey", "onEnterKey", "onSpaceKey", "DomHandler", "focus", "optionIndex", "findNextOptionIndex", "preventDefault", "altKey", "findPrevOptionIndex", "find", "length", "element", "findSingle", "concat", "anchorElement", "click", "links", "matchedOptionIndex", "_toConsumableArray", "findIndex", "link", "order", "getAttribute", "toggle", "show", "currentTarget", "onEnter", "el", "addStyles", "position", "top", "left", "alignOverlay", "bindScrollListener", "set", "$primevue", "config", "zIndex", "menu", "onLeave", "unbindScrollListener", "onAfterLeave", "absolutePosition", "targetWidth", "getOuterWidth", "minWidth", "_this", "isOutsideContainer", "contains", "isOutsideTarget", "document", "addEventListener", "removeEventListener", "_this2", "ConnectedOverlayScrollHandler", "_this3", "isTouchDevice", "window", "onOverlayClick", "OverlayEventBus", "emit", "containerRef", "listRef", "computed", "components", "PVMenuitem", "Menuitem", "Portal", "_component_Portal", "_createVNode", "_Transition", "$data", "ref", "apply", "arguments", "ptmi", "$slots", "start", "_renderSlot", "onFocus", "onBlur", "onKeydown", "_Fragment", "_renderList", "i", "toString", "items", "separator", "submenulabel", "_createTextVNode", "_toDisplayString", "child", "j", "_component_PVMenuitem", "unstyled", "onItemMousemove", "pt", "end"]
}
