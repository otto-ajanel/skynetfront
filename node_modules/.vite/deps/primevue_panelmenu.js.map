{
  "version": 3,
  "sources": ["../../src/panelmenu/style/PanelMenuStyle.js", "../../src/panelmenu/BasePanelMenu.vue", "../../src/panelmenu/PanelMenuSub.vue", "../../src/panelmenu/PanelMenuSub.vue?vue&type=template&id=5a7c6584&lang.js", "../../src/panelmenu/PanelMenuList.vue", "../../src/panelmenu/PanelMenuList.vue?vue&type=template&id=7630bc73&lang.js", "../../src/panelmenu/PanelMenu.vue", "../../src/panelmenu/PanelMenu.vue?vue&type=template&id=021d1336&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-panelmenu {\n    display: flex;\n    flex-direction: column;\n    gap: ${dt('panelmenu.gap')};\n}\n\n.p-panelmenu-panel {\n    background: ${dt('panelmenu.panel.background')};\n    border-width: ${dt('panelmenu.panel.border.width')};\n    border-style: solid;\n    border-color: ${dt('panelmenu.panel.border.color')};\n    color: ${dt('panelmenu.panel.color')};\n    border-radius: ${dt('panelmenu.panel.border.radius')};\n    padding: ${dt('panelmenu.panel.padding')};\n}\n\n.p-panelmenu-panel:first-child {\n    border-width: ${dt('panelmenu.panel.first.border.width')};\n    border-top-left-radius: ${dt('panelmenu.panel.first.top.border.radius')};\n    border-top-right-radius: ${dt('panelmenu.panel.first.top.border.radius')};\n}\n\n.p-panelmenu-panel:last-child {\n    border-width: ${dt('panelmenu.panel.last.border.width')};\n    border-bottom-left-radius: ${dt('panelmenu.panel.last.bottom.border.radius')};\n    border-bottom-right-radius: ${dt('panelmenu.panel.last.bottom.border.radius')};\n}\n\n.p-panelmenu-header {\n    outline: 0 none;\n}\n\n.p-panelmenu-header-content {\n    border-radius: ${dt('panelmenu.item.border.radius')};\n    transition: background ${dt('panelmenu.transition.duration')}, color ${dt('panelmenu.transition.duration')}, outline-color ${dt('panelmenu.transition.duration')}, box-shadow ${dt('panelmenu.transition.duration')};\n    outline-color: transparent;\n    color: ${dt('panelmenu.item.color')};\n}\n\n.p-panelmenu-header-link {\n    display: flex;\n    gap: ${dt('panelmenu.item.gap')};\n    padding: ${dt('panelmenu.item.padding')};\n    align-items: center;\n    user-select: none;\n    cursor: pointer;\n    position: relative;\n    text-decoration: none;\n    color: inherit;\n}\n\n.p-panelmenu-header-icon,\n.p-panelmenu-item-icon {\n    color: ${dt('panelmenu.item.icon.color')};\n}\n\n.p-panelmenu-submenu-icon {\n    color: ${dt('panelmenu.submenu.icon.color')};\n}\n\n.p-panelmenu-header:not(.p-disabled):focus-visible .p-panelmenu-header-content {\n    background: ${dt('panelmenu.item.focus.background')};\n    color: ${dt('panelmenu.item.focus.color')};\n}\n\n.p-panelmenu-header:not(.p-disabled):focus-visible .p-panelmenu-header-content .p-panelmenu-header-icon {\n    color: ${dt('panelmenu.item.icon.focus.color')};\n}\n\n.p-panelmenu-header:not(.p-disabled):focus-visible .p-panelmenu-header-content .p-panelmenu-submenu-icon {\n    color: ${dt('panelmenu.submenu.icon.focus.color')};\n}\n\n.p-panelmenu-header:not(.p-disabled) .p-panelmenu-header-content:hover {\n    background: ${dt('panelmenu.item.focus.background')};\n    color: ${dt('panelmenu.item.focus.color')};\n}\n\n.p-panelmenu-header:not(.p-disabled) .p-panelmenu-header-content:hover .p-panelmenu-header-icon {\n    color: ${dt('panelmenu.item.icon.focus.color')};\n}\n\n.p-panelmenu-header:not(.p-disabled) .p-panelmenu-header-content:hover .p-panelmenu-submenu-icon {\n    color: ${dt('panelmenu.submenu.icon.focus.color')};\n}\n\n.p-panelmenu-submenu {\n    margin: 0;\n    padding: 0 0 0 ${dt('panelmenu.submenu.indent')};\n    outline: 0;\n    list-style: none;\n}\n\n.p-panelmenu-item-link {\n    display: flex;\n    gap: ${dt('panelmenu.item.gap')};\n    padding: ${dt('panelmenu.item.padding')};\n    align-items: center;\n    user-select: none;\n    cursor: pointer;\n    text-decoration: none;\n    color: inherit;\n    position: relative;\n    overflow: hidden;\n}\n\n.p-panelmenu-item-label {\n    line-height: 1;\n}\n\n.p-panelmenu-item-content {\n    border-radius: ${dt('panelmenu.item.border.radius')};\n    transition: background ${dt('panelmenu.transition.duration')}, color ${dt('panelmenu.transition.duration')}, outline-color ${dt('panelmenu.transition.duration')}, box-shadow ${dt('panelmenu.transition.duration')};\n    color: ${dt('panelmenu.item.color')};\n    outline-color: transparent;\n}\n\n.p-panelmenu-item.p-focus > .p-panelmenu-item-content {\n    background: ${dt('panelmenu.item.focus.background')};\n    color: ${dt('panelmenu.item.focus.color')};\n}\n\n.p-panelmenu-item.p-focus > .p-panelmenu-item-content .p-panelmenu-item-icon {\n    color: ${dt('panelmenu.item.focus.color')};\n}\n\n.p-panelmenu-item.p-focus > .p-panelmenu-item-content .p-panelmenu-submenu-icon {\n    color: ${dt('panelmenu.submenu.icon.focus.color')};\n}\n\n.p-panelmenu-item:not(.p-disabled) > .p-panelmenu-item-content:hover {\n    background: ${dt('panelmenu.item.focus.background')};\n    color: ${dt('panelmenu.item.focus.color')};\n}\n\n.p-panelmenu-item:not(.p-disabled) > .p-panelmenu-item-content:hover .p-panelmenu-item-icon {\n    color: ${dt('panelmenu.item.icon.focus.color')};\n}\n\n.p-panelmenu-item:not(.p-disabled) > .p-panelmenu-item-content:hover .p-panelmenu-submenu-icon {\n    color: ${dt('panelmenu.submenu.icon.focus.color')};\n}\n`;\n\nconst classes = {\n    root: 'p-panelmenu p-component',\n    panel: 'p-panelmenu-panel',\n    header: ({ instance, item }) => [\n        'p-panelmenu-header',\n        {\n            'p-panelmenu-header-active': instance.isItemActive(item) && !!item.items,\n            'p-disabled': instance.isItemDisabled(item)\n        }\n    ],\n    headerContent: 'p-panelmenu-header-content',\n    headerLink: 'p-panelmenu-header-link',\n    headerIcon: 'p-panelmenu-header-icon',\n    headerLabel: 'p-panelmenu-header-label',\n    contentContainer: 'p-panelmenu-content-container',\n    content: 'p-panelmenu-content',\n    rootList: 'p-panelmenu-root-list',\n    item: ({ instance, processedItem }) => [\n        'p-panelmenu-item',\n        {\n            'p-focus': instance.isItemFocused(processedItem),\n            'p-disabled': instance.isItemDisabled(processedItem)\n        }\n    ],\n    itemContent: 'p-panelmenu-item-content',\n    itemLink: 'p-panelmenu-item-link',\n    itemIcon: 'p-panelmenu-item-icon',\n    itemLabel: 'p-panelmenu-item-label',\n    submenuIcon: 'p-panelmenu-submenu-icon',\n    submenu: 'p-panelmenu-submenu',\n    separator: 'p-menuitem-separator'\n};\n\nexport default BaseStyle.extend({\n    name: 'panelmenu',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport PanelMenuStyle from 'primevue/panelmenu/style';\n\nexport default {\n    name: 'BasePanelMenu',\n    extends: BaseComponent,\n    props: {\n        model: {\n            type: Array,\n            default: null\n        },\n        expandedKeys: {\n            type: Object,\n            default: null\n        },\n        multiple: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: 0\n        }\n    },\n    style: PanelMenuStyle,\n    provide() {\n        return {\n            $pcPanelMenu: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <ul :class=\"cx('submenu')\" :tabindex=\"tabindex\">\n        <template v-for=\"(processedItem, index) of items\" :key=\"getItemKey(processedItem)\">\n            <li\n                v-if=\"isItemVisible(processedItem) && !getItemProp(processedItem, 'separator')\"\n                :id=\"getItemId(processedItem)\"\n                :class=\"[cx('item', { processedItem }), getItemProp(processedItem, 'class')]\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                role=\"treeitem\"\n                :aria-label=\"getItemLabel(processedItem)\"\n                :aria-expanded=\"isItemGroup(processedItem) ? isItemActive(processedItem) : undefined\"\n                :aria-level=\"level + 1\"\n                :aria-setsize=\"getAriaSetSize()\"\n                :aria-posinset=\"getAriaPosInset(index)\"\n                v-bind=\"getPTOptions('item', processedItem, index)\"\n                :data-p-focused=\"isItemFocused(processedItem)\"\n                :data-p-disabled=\"isItemDisabled(processedItem)\"\n            >\n                <div :class=\"cx('itemContent')\" @click=\"onItemClick($event, processedItem)\" @mousemove=\"onItemMouseMove($event, processedItem)\" v-bind=\"getPTOptions('itemContent', processedItem, index)\">\n                    <template v-if=\"!templates.item\">\n                        <a v-ripple :href=\"getItemProp(processedItem, 'url')\" :class=\"cx('itemLink')\" :target=\"getItemProp(processedItem, 'target')\" tabindex=\"-1\" aria-hidden=\"true\" v-bind=\"getPTOptions('itemLink', processedItem, index)\">\n                            <template v-if=\"isItemGroup(processedItem)\">\n                                <component v-if=\"templates.submenuicon\" :is=\"templates.submenuicon\" :class=\"cx('submenuIcon')\" :active=\"isItemActive(processedItem)\" v-bind=\"getPTOptions('submenuIcon', processedItem, index)\" />\n                                <component v-else :is=\"isItemActive(processedItem) ? 'ChevronDownIcon' : 'ChevronRightIcon'\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions('submenuIcon', processedItem, index)\" />\n                            </template>\n                            <component v-if=\"templates.itemicon\" :is=\"templates.itemicon\" :item=\"processedItem.item\" :class=\"cx('itemIcon')\" />\n                            <span v-else-if=\"getItemProp(processedItem, 'icon')\" :class=\"[cx('itemIcon'), getItemProp(processedItem, 'icon')]\" v-bind=\"getPTOptions('itemIcon', processedItem, index)\" />\n                            <span :class=\"cx('itemLabel')\" v-bind=\"getPTOptions('itemLabel', processedItem, index)\">{{ getItemLabel(processedItem) }}</span>\n                        </a>\n                    </template>\n                    <component\n                        v-else\n                        :is=\"templates.item\"\n                        :item=\"processedItem.item\"\n                        :root=\"false\"\n                        :active=\"isItemActive(processedItem)\"\n                        :hasSubmenu=\"isItemGroup(processedItem)\"\n                        :label=\"getItemLabel(processedItem)\"\n                        :props=\"getMenuItemProps(processedItem, index)\"\n                    ></component>\n                </div>\n                <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n                    <div v-show=\"isItemActive(processedItem)\" :class=\"cx('contentContainer')\" v-bind=\"ptm('contentContainer')\">\n                        <PanelMenuSub\n                            v-if=\"isItemVisible(processedItem) && isItemGroup(processedItem)\"\n                            :id=\"getItemId(processedItem) + '_list'\"\n                            role=\"group\"\n                            :panelId=\"panelId\"\n                            :focusedItemId=\"focusedItemId\"\n                            :items=\"processedItem.items\"\n                            :level=\"level + 1\"\n                            :templates=\"templates\"\n                            :activeItemPath=\"activeItemPath\"\n                            @item-toggle=\"onItemToggle\"\n                            @item-mousemove=\"$emit('item-mousemove', $event)\"\n                            :pt=\"pt\"\n                            :unstyled=\"unstyled\"\n                            v-bind=\"ptm('submenu')\"\n                        />\n                    </div>\n                </transition>\n            </li>\n            <li\n                v-if=\"isItemVisible(processedItem) && getItemProp(processedItem, 'separator')\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                :class=\"[cx('separator'), getItemProp(processedItem, 'class')]\"\n                role=\"separator\"\n                v-bind=\"ptm('separator')\"\n            ></li>\n        </template>\n    </ul>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { ObjectUtils } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'PanelMenuSub',\n    hostName: 'PanelMenu',\n    extends: BaseComponent,\n    emits: ['item-toggle', 'item-mousemove'],\n    props: {\n        panelId: {\n            type: String,\n            default: null\n        },\n        focusedItemId: {\n            type: String,\n            default: null\n        },\n        items: {\n            type: Array,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        activeItemPath: {\n            type: Object,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: -1\n        }\n    },\n    methods: {\n        getItemId(processedItem) {\n            return `${this.panelId}_${processedItem.key}`;\n        },\n        getItemKey(processedItem) {\n            return this.getItemId(processedItem);\n        },\n        getItemProp(processedItem, name, params) {\n            return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name], params) : undefined;\n        },\n        getItemLabel(processedItem) {\n            return this.getItemProp(processedItem, 'label');\n        },\n        getPTOptions(key, processedItem, index) {\n            return this.ptm(key, {\n                context: {\n                    item: processedItem,\n                    index,\n                    active: this.isItemActive(processedItem),\n                    focused: this.isItemFocused(processedItem),\n                    disabled: this.isItemDisabled(processedItem)\n                }\n            });\n        },\n        isItemActive(processedItem) {\n            return this.activeItemPath.some((path) => path.key === processedItem.key);\n        },\n        isItemVisible(processedItem) {\n            return this.getItemProp(processedItem, 'visible') !== false;\n        },\n        isItemDisabled(processedItem) {\n            return this.getItemProp(processedItem, 'disabled');\n        },\n        isItemFocused(processedItem) {\n            return this.focusedItemId === this.getItemId(processedItem);\n        },\n        isItemGroup(processedItem) {\n            return ObjectUtils.isNotEmpty(processedItem.items);\n        },\n        onItemClick(event, processedItem) {\n            this.getItemProp(processedItem, 'command', { originalEvent: event, item: processedItem.item });\n            this.$emit('item-toggle', { processedItem, expanded: !this.isItemActive(processedItem) });\n        },\n        onItemToggle(event) {\n            this.$emit('item-toggle', event);\n        },\n        onItemMouseMove(event, processedItem) {\n            this.$emit('item-mousemove', { originalEvent: event, processedItem });\n        },\n        getAriaSetSize() {\n            return this.items.filter((processedItem) => this.isItemVisible(processedItem) && !this.getItemProp(processedItem, 'separator')).length;\n        },\n        getAriaPosInset(index) {\n            return index - this.items.slice(0, index).filter((processedItem) => this.isItemVisible(processedItem) && this.getItemProp(processedItem, 'separator')).length + 1;\n        },\n        getMenuItemProps(processedItem, index) {\n            return {\n                action: mergeProps(\n                    {\n                        class: this.cx('itemLink'),\n                        tabindex: -1,\n                        'aria-hidden': true\n                    },\n                    this.getPTOptions('itemLink', processedItem, index)\n                ),\n                icon: mergeProps(\n                    {\n                        class: [this.cx('itemIcon'), this.getItemProp(processedItem, 'icon')]\n                    },\n                    this.getPTOptions('itemIcon', processedItem, index)\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('itemLabel')\n                    },\n                    this.getPTOptions('itemLabel', processedItem, index)\n                ),\n                submenuicon: mergeProps(\n                    {\n                        class: this.cx('submenuIcon')\n                    },\n                    this.getPTOptions('submenuicon', processedItem, index)\n                )\n            };\n        }\n    },\n    components: {\n        ChevronRightIcon: ChevronRightIcon,\n        ChevronDownIcon: ChevronDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <ul :class=\"cx('submenu')\" :tabindex=\"tabindex\">\n        <template v-for=\"(processedItem, index) of items\" :key=\"getItemKey(processedItem)\">\n            <li\n                v-if=\"isItemVisible(processedItem) && !getItemProp(processedItem, 'separator')\"\n                :id=\"getItemId(processedItem)\"\n                :class=\"[cx('item', { processedItem }), getItemProp(processedItem, 'class')]\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                role=\"treeitem\"\n                :aria-label=\"getItemLabel(processedItem)\"\n                :aria-expanded=\"isItemGroup(processedItem) ? isItemActive(processedItem) : undefined\"\n                :aria-level=\"level + 1\"\n                :aria-setsize=\"getAriaSetSize()\"\n                :aria-posinset=\"getAriaPosInset(index)\"\n                v-bind=\"getPTOptions('item', processedItem, index)\"\n                :data-p-focused=\"isItemFocused(processedItem)\"\n                :data-p-disabled=\"isItemDisabled(processedItem)\"\n            >\n                <div :class=\"cx('itemContent')\" @click=\"onItemClick($event, processedItem)\" @mousemove=\"onItemMouseMove($event, processedItem)\" v-bind=\"getPTOptions('itemContent', processedItem, index)\">\n                    <template v-if=\"!templates.item\">\n                        <a v-ripple :href=\"getItemProp(processedItem, 'url')\" :class=\"cx('itemLink')\" :target=\"getItemProp(processedItem, 'target')\" tabindex=\"-1\" aria-hidden=\"true\" v-bind=\"getPTOptions('itemLink', processedItem, index)\">\n                            <template v-if=\"isItemGroup(processedItem)\">\n                                <component v-if=\"templates.submenuicon\" :is=\"templates.submenuicon\" :class=\"cx('submenuIcon')\" :active=\"isItemActive(processedItem)\" v-bind=\"getPTOptions('submenuIcon', processedItem, index)\" />\n                                <component v-else :is=\"isItemActive(processedItem) ? 'ChevronDownIcon' : 'ChevronRightIcon'\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions('submenuIcon', processedItem, index)\" />\n                            </template>\n                            <component v-if=\"templates.itemicon\" :is=\"templates.itemicon\" :item=\"processedItem.item\" :class=\"cx('itemIcon')\" />\n                            <span v-else-if=\"getItemProp(processedItem, 'icon')\" :class=\"[cx('itemIcon'), getItemProp(processedItem, 'icon')]\" v-bind=\"getPTOptions('itemIcon', processedItem, index)\" />\n                            <span :class=\"cx('itemLabel')\" v-bind=\"getPTOptions('itemLabel', processedItem, index)\">{{ getItemLabel(processedItem) }}</span>\n                        </a>\n                    </template>\n                    <component\n                        v-else\n                        :is=\"templates.item\"\n                        :item=\"processedItem.item\"\n                        :root=\"false\"\n                        :active=\"isItemActive(processedItem)\"\n                        :hasSubmenu=\"isItemGroup(processedItem)\"\n                        :label=\"getItemLabel(processedItem)\"\n                        :props=\"getMenuItemProps(processedItem, index)\"\n                    ></component>\n                </div>\n                <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n                    <div v-show=\"isItemActive(processedItem)\" :class=\"cx('contentContainer')\" v-bind=\"ptm('contentContainer')\">\n                        <PanelMenuSub\n                            v-if=\"isItemVisible(processedItem) && isItemGroup(processedItem)\"\n                            :id=\"getItemId(processedItem) + '_list'\"\n                            role=\"group\"\n                            :panelId=\"panelId\"\n                            :focusedItemId=\"focusedItemId\"\n                            :items=\"processedItem.items\"\n                            :level=\"level + 1\"\n                            :templates=\"templates\"\n                            :activeItemPath=\"activeItemPath\"\n                            @item-toggle=\"onItemToggle\"\n                            @item-mousemove=\"$emit('item-mousemove', $event)\"\n                            :pt=\"pt\"\n                            :unstyled=\"unstyled\"\n                            v-bind=\"ptm('submenu')\"\n                        />\n                    </div>\n                </transition>\n            </li>\n            <li\n                v-if=\"isItemVisible(processedItem) && getItemProp(processedItem, 'separator')\"\n                :style=\"getItemProp(processedItem, 'style')\"\n                :class=\"[cx('separator'), getItemProp(processedItem, 'class')]\"\n                role=\"separator\"\n                v-bind=\"ptm('separator')\"\n            ></li>\n        </template>\n    </ul>\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { ObjectUtils } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport Ripple from 'primevue/ripple';\nimport { mergeProps } from 'vue';\n\nexport default {\n    name: 'PanelMenuSub',\n    hostName: 'PanelMenu',\n    extends: BaseComponent,\n    emits: ['item-toggle', 'item-mousemove'],\n    props: {\n        panelId: {\n            type: String,\n            default: null\n        },\n        focusedItemId: {\n            type: String,\n            default: null\n        },\n        items: {\n            type: Array,\n            default: null\n        },\n        level: {\n            type: Number,\n            default: 0\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        activeItemPath: {\n            type: Object,\n            default: null\n        },\n        tabindex: {\n            type: Number,\n            default: -1\n        }\n    },\n    methods: {\n        getItemId(processedItem) {\n            return `${this.panelId}_${processedItem.key}`;\n        },\n        getItemKey(processedItem) {\n            return this.getItemId(processedItem);\n        },\n        getItemProp(processedItem, name, params) {\n            return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name], params) : undefined;\n        },\n        getItemLabel(processedItem) {\n            return this.getItemProp(processedItem, 'label');\n        },\n        getPTOptions(key, processedItem, index) {\n            return this.ptm(key, {\n                context: {\n                    item: processedItem,\n                    index,\n                    active: this.isItemActive(processedItem),\n                    focused: this.isItemFocused(processedItem),\n                    disabled: this.isItemDisabled(processedItem)\n                }\n            });\n        },\n        isItemActive(processedItem) {\n            return this.activeItemPath.some((path) => path.key === processedItem.key);\n        },\n        isItemVisible(processedItem) {\n            return this.getItemProp(processedItem, 'visible') !== false;\n        },\n        isItemDisabled(processedItem) {\n            return this.getItemProp(processedItem, 'disabled');\n        },\n        isItemFocused(processedItem) {\n            return this.focusedItemId === this.getItemId(processedItem);\n        },\n        isItemGroup(processedItem) {\n            return ObjectUtils.isNotEmpty(processedItem.items);\n        },\n        onItemClick(event, processedItem) {\n            this.getItemProp(processedItem, 'command', { originalEvent: event, item: processedItem.item });\n            this.$emit('item-toggle', { processedItem, expanded: !this.isItemActive(processedItem) });\n        },\n        onItemToggle(event) {\n            this.$emit('item-toggle', event);\n        },\n        onItemMouseMove(event, processedItem) {\n            this.$emit('item-mousemove', { originalEvent: event, processedItem });\n        },\n        getAriaSetSize() {\n            return this.items.filter((processedItem) => this.isItemVisible(processedItem) && !this.getItemProp(processedItem, 'separator')).length;\n        },\n        getAriaPosInset(index) {\n            return index - this.items.slice(0, index).filter((processedItem) => this.isItemVisible(processedItem) && this.getItemProp(processedItem, 'separator')).length + 1;\n        },\n        getMenuItemProps(processedItem, index) {\n            return {\n                action: mergeProps(\n                    {\n                        class: this.cx('itemLink'),\n                        tabindex: -1,\n                        'aria-hidden': true\n                    },\n                    this.getPTOptions('itemLink', processedItem, index)\n                ),\n                icon: mergeProps(\n                    {\n                        class: [this.cx('itemIcon'), this.getItemProp(processedItem, 'icon')]\n                    },\n                    this.getPTOptions('itemIcon', processedItem, index)\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('itemLabel')\n                    },\n                    this.getPTOptions('itemLabel', processedItem, index)\n                ),\n                submenuicon: mergeProps(\n                    {\n                        class: this.cx('submenuIcon')\n                    },\n                    this.getPTOptions('submenuicon', processedItem, index)\n                )\n            };\n        }\n    },\n    components: {\n        ChevronRightIcon: ChevronRightIcon,\n        ChevronDownIcon: ChevronDownIcon\n    },\n    directives: {\n        ripple: Ripple\n    }\n};\n</script>\n", "<template>\n    <PanelMenuSub\n        :id=\"panelId + '_list'\"\n        :class=\"cx('rootList')\"\n        role=\"tree\"\n        :tabindex=\"-1\"\n        :aria-activedescendant=\"focused ? focusedItemId : undefined\"\n        :panelId=\"panelId\"\n        :focusedItemId=\"focused ? focusedItemId : undefined\"\n        :items=\"processedItems\"\n        :templates=\"templates\"\n        :activeItemPath=\"activeItemPath\"\n        @focus=\"onFocus\"\n        @blur=\"onBlur\"\n        @keydown=\"onKeyDown\"\n        @item-toggle=\"onItemToggle\"\n        @item-mousemove=\"onItemMouseMove\"\n        :pt=\"pt\"\n        :unstyled=\"unstyled\"\n        v-bind=\"ptm('rootList')\"\n    />\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport PanelMenuSub from './PanelMenuSub.vue';\n\nexport default {\n    name: 'PanelMenuList',\n    hostName: 'PanelMenu',\n    extends: BaseComponent,\n    emits: ['item-toggle', 'header-focus'],\n    props: {\n        panelId: {\n            type: String,\n            default: null\n        },\n        items: {\n            type: Array,\n            default: null\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        expandedKeys: {\n            type: Object,\n            default: null\n        }\n    },\n    searchTimeout: null,\n    searchValue: null,\n    data() {\n        return {\n            focused: false,\n            focusedItem: null,\n            activeItemPath: []\n        };\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.autoUpdateActiveItemPath(newValue);\n        }\n    },\n    mounted() {\n        this.autoUpdateActiveItemPath(this.expandedKeys);\n    },\n    methods: {\n        getItemProp(processedItem, name) {\n            return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name]) : undefined;\n        },\n        getItemLabel(processedItem) {\n            return this.getItemProp(processedItem, 'label');\n        },\n        isItemVisible(processedItem) {\n            return this.getItemProp(processedItem, 'visible') !== false;\n        },\n        isItemDisabled(processedItem) {\n            return this.getItemProp(processedItem, 'disabled');\n        },\n        isItemActive(processedItem) {\n            return this.activeItemPath.some((path) => path.key === processedItem.parentKey);\n        },\n        isItemGroup(processedItem) {\n            return ObjectUtils.isNotEmpty(processedItem.items);\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.focusedItem = this.focusedItem || (this.isElementInPanel(event, event.relatedTarget) ? this.findFirstItem() : this.findLastItem());\n        },\n        onBlur() {\n            this.focused = false;\n            this.focusedItem = null;\n            this.searchValue = '';\n        },\n        onKeyDown(event) {\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                case 'Tab':\n                case 'PageDown':\n                case 'PageUp':\n                case 'Backspace':\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n                        this.searchItems(event, event.key);\n                    }\n\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const processedItem = ObjectUtils.isNotEmpty(this.focusedItem) ? this.findNextItem(this.focusedItem) : this.findFirstItem();\n\n            this.changeFocusedItem({ originalEvent: event, processedItem, focusOnNext: true });\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const processedItem = ObjectUtils.isNotEmpty(this.focusedItem) ? this.findPrevItem(this.focusedItem) : this.findLastItem();\n\n            this.changeFocusedItem({ originalEvent: event, processedItem, selfCheck: true });\n            event.preventDefault();\n        },\n        onArrowLeftKey(event) {\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const matched = this.activeItemPath.some((p) => p.key === this.focusedItem.key);\n\n                if (matched) {\n                    this.activeItemPath = this.activeItemPath.filter((p) => p.key !== this.focusedItem.key);\n                } else {\n                    this.focusedItem = ObjectUtils.isNotEmpty(this.focusedItem.parent) ? this.focusedItem.parent : this.focusedItem;\n                }\n\n                event.preventDefault();\n            }\n        },\n        onArrowRightKey(event) {\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const grouped = this.isItemGroup(this.focusedItem);\n\n                if (grouped) {\n                    const matched = this.activeItemPath.some((p) => p.key === this.focusedItem.key);\n\n                    if (matched) {\n                        this.onArrowDownKey(event);\n                    } else {\n                        this.activeItemPath = this.activeItemPath.filter((p) => p.parentKey !== this.focusedItem.parentKey);\n                        this.activeItemPath.push(this.focusedItem);\n                    }\n                }\n\n                event.preventDefault();\n            }\n        },\n        onHomeKey(event) {\n            this.changeFocusedItem({ originalEvent: event, processedItem: this.findFirstItem(), allowHeaderFocus: false });\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            this.changeFocusedItem({ originalEvent: event, processedItem: this.findLastItem(), focusOnNext: true, allowHeaderFocus: false });\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const element = DomHandler.findSingle(this.$el, `li[id=\"${`${this.focusedItemId}`}\"]`);\n                const anchorElement = element && (DomHandler.findSingle(element, '[data-pc-section=\"itemlink\"]') || DomHandler.findSingle(element, 'a,button'));\n\n                anchorElement ? anchorElement.click() : element && element.click();\n            }\n\n            event.preventDefault();\n        },\n        onSpaceKey(event) {\n            this.onEnterKey(event);\n        },\n        onItemToggle(event) {\n            const { processedItem, expanded } = event;\n\n            if (this.expandedKeys) {\n                this.$emit('item-toggle', { item: processedItem.item, expanded });\n            } else {\n                this.activeItemPath = this.activeItemPath.filter((p) => p.parentKey !== processedItem.parentKey);\n                expanded && this.activeItemPath.push(processedItem);\n            }\n\n            this.focusedItem = processedItem;\n            DomHandler.focus(this.$el);\n        },\n        onItemMouseMove(event) {\n            if (this.focused) {\n                this.focusedItem = event.processedItem;\n            }\n        },\n        isElementInPanel(event, element) {\n            const panel = event.currentTarget.closest('[data-pc-section=\"panel\"]');\n\n            return panel && panel.contains(element);\n        },\n        isItemMatched(processedItem) {\n            return this.isValidItem(processedItem) && this.getItemLabel(processedItem)?.toLocaleLowerCase(this.searchLocale).startsWith(this.searchValue.toLocaleLowerCase(this.searchLocale));\n        },\n        isVisibleItem(processedItem) {\n            return !!processedItem && (processedItem.level === 0 || this.isItemActive(processedItem)) && this.isItemVisible(processedItem);\n        },\n        isValidItem(processedItem) {\n            return !!processedItem && !this.isItemDisabled(processedItem) && !this.getItemProp(processedItem, 'separator');\n        },\n        findFirstItem() {\n            return this.visibleItems.find((processedItem) => this.isValidItem(processedItem));\n        },\n        findLastItem() {\n            return ObjectUtils.findLast(this.visibleItems, (processedItem) => this.isValidItem(processedItem));\n        },\n        findNextItem(processedItem) {\n            const index = this.visibleItems.findIndex((item) => item.key === processedItem.key);\n            const matchedItem = index < this.visibleItems.length - 1 ? this.visibleItems.slice(index + 1).find((pItem) => this.isValidItem(pItem)) : undefined;\n\n            return matchedItem || processedItem;\n        },\n        findPrevItem(processedItem) {\n            const index = this.visibleItems.findIndex((item) => item.key === processedItem.key);\n            const matchedItem = index > 0 ? ObjectUtils.findLast(this.visibleItems.slice(0, index), (pItem) => this.isValidItem(pItem)) : undefined;\n\n            return matchedItem || processedItem;\n        },\n        searchItems(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let matchedItem = null;\n            let matched = false;\n\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const focusedItemIndex = this.visibleItems.findIndex((processedItem) => processedItem.key === this.focusedItem.key);\n\n                matchedItem = this.visibleItems.slice(focusedItemIndex).find((processedItem) => this.isItemMatched(processedItem));\n                matchedItem = ObjectUtils.isEmpty(matchedItem) ? this.visibleItems.slice(0, focusedItemIndex).find((processedItem) => this.isItemMatched(processedItem)) : matchedItem;\n            } else {\n                matchedItem = this.visibleItems.find((processedItem) => this.isItemMatched(processedItem));\n            }\n\n            if (ObjectUtils.isNotEmpty(matchedItem)) {\n                matched = true;\n            }\n\n            if (ObjectUtils.isEmpty(matchedItem) && ObjectUtils.isEmpty(this.focusedItem)) {\n                matchedItem = this.findFirstItem();\n            }\n\n            if (ObjectUtils.isNotEmpty(matchedItem)) {\n                this.changeFocusedItem({\n                    originalEvent: event,\n                    processedItem: matchedItem,\n                    allowHeaderFocus: false\n                });\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n\n            return matched;\n        },\n        changeFocusedItem(event) {\n            const { originalEvent, processedItem, focusOnNext, selfCheck, allowHeaderFocus = true } = event;\n\n            if (ObjectUtils.isNotEmpty(this.focusedItem) && this.focusedItem.key !== processedItem.key) {\n                this.focusedItem = processedItem;\n                this.scrollInView();\n            } else if (allowHeaderFocus) {\n                this.$emit('header-focus', { originalEvent, focusOnNext, selfCheck });\n            }\n        },\n        scrollInView() {\n            const element = DomHandler.findSingle(this.$el, `li[id=\"${`${this.focusedItemId}`}\"]`);\n\n            if (element) {\n                element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n            }\n        },\n        autoUpdateActiveItemPath(expandedKeys) {\n            this.activeItemPath = Object.entries(expandedKeys || {}).reduce((acc, [key, val]) => {\n                if (val) {\n                    const processedItem = this.findProcessedItemByItemKey(key);\n\n                    processedItem && acc.push(processedItem);\n                }\n\n                return acc;\n            }, []);\n        },\n        findProcessedItemByItemKey(key, processedItems, level = 0) {\n            processedItems = processedItems || (level === 0 && this.processedItems);\n\n            if (!processedItems) return null;\n\n            for (let i = 0; i < processedItems.length; i++) {\n                const processedItem = processedItems[i];\n\n                if (this.getItemProp(processedItem, 'key') === key) return processedItem;\n\n                const matchedItem = this.findProcessedItemByItemKey(key, processedItem.items, level + 1);\n\n                if (matchedItem) return matchedItem;\n            }\n        },\n        createProcessedItems(items, level = 0, parent = {}, parentKey = '') {\n            const processedItems = [];\n\n            items &&\n                items.forEach((item, index) => {\n                    const key = (parentKey !== '' ? parentKey + '_' : '') + index;\n                    const newItem = {\n                        item,\n                        index,\n                        level,\n                        key,\n                        parent,\n                        parentKey\n                    };\n\n                    newItem['items'] = this.createProcessedItems(item.items, level + 1, newItem, key);\n                    processedItems.push(newItem);\n                });\n\n            return processedItems;\n        },\n        flatItems(processedItems, processedFlattenItems = []) {\n            processedItems &&\n                processedItems.forEach((processedItem) => {\n                    if (this.isVisibleItem(processedItem)) {\n                        processedFlattenItems.push(processedItem);\n                        this.flatItems(processedItem.items, processedFlattenItems);\n                    }\n                });\n\n            return processedFlattenItems;\n        }\n    },\n    computed: {\n        processedItems() {\n            return this.createProcessedItems(this.items || []);\n        },\n        visibleItems() {\n            return this.flatItems(this.processedItems);\n        },\n        focusedItemId() {\n            return ObjectUtils.isNotEmpty(this.focusedItem) ? `${this.panelId}_${this.focusedItem.key}` : null;\n        }\n    },\n    components: {\n        PanelMenuSub: PanelMenuSub\n    }\n};\n</script>\n", "<template>\n    <PanelMenuSub\n        :id=\"panelId + '_list'\"\n        :class=\"cx('rootList')\"\n        role=\"tree\"\n        :tabindex=\"-1\"\n        :aria-activedescendant=\"focused ? focusedItemId : undefined\"\n        :panelId=\"panelId\"\n        :focusedItemId=\"focused ? focusedItemId : undefined\"\n        :items=\"processedItems\"\n        :templates=\"templates\"\n        :activeItemPath=\"activeItemPath\"\n        @focus=\"onFocus\"\n        @blur=\"onBlur\"\n        @keydown=\"onKeyDown\"\n        @item-toggle=\"onItemToggle\"\n        @item-mousemove=\"onItemMouseMove\"\n        :pt=\"pt\"\n        :unstyled=\"unstyled\"\n        v-bind=\"ptm('rootList')\"\n    />\n</template>\n\n<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport PanelMenuSub from './PanelMenuSub.vue';\n\nexport default {\n    name: 'PanelMenuList',\n    hostName: 'PanelMenu',\n    extends: BaseComponent,\n    emits: ['item-toggle', 'header-focus'],\n    props: {\n        panelId: {\n            type: String,\n            default: null\n        },\n        items: {\n            type: Array,\n            default: null\n        },\n        templates: {\n            type: Object,\n            default: null\n        },\n        expandedKeys: {\n            type: Object,\n            default: null\n        }\n    },\n    searchTimeout: null,\n    searchValue: null,\n    data() {\n        return {\n            focused: false,\n            focusedItem: null,\n            activeItemPath: []\n        };\n    },\n    watch: {\n        expandedKeys(newValue) {\n            this.autoUpdateActiveItemPath(newValue);\n        }\n    },\n    mounted() {\n        this.autoUpdateActiveItemPath(this.expandedKeys);\n    },\n    methods: {\n        getItemProp(processedItem, name) {\n            return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name]) : undefined;\n        },\n        getItemLabel(processedItem) {\n            return this.getItemProp(processedItem, 'label');\n        },\n        isItemVisible(processedItem) {\n            return this.getItemProp(processedItem, 'visible') !== false;\n        },\n        isItemDisabled(processedItem) {\n            return this.getItemProp(processedItem, 'disabled');\n        },\n        isItemActive(processedItem) {\n            return this.activeItemPath.some((path) => path.key === processedItem.parentKey);\n        },\n        isItemGroup(processedItem) {\n            return ObjectUtils.isNotEmpty(processedItem.items);\n        },\n        onFocus(event) {\n            this.focused = true;\n            this.focusedItem = this.focusedItem || (this.isElementInPanel(event, event.relatedTarget) ? this.findFirstItem() : this.findLastItem());\n        },\n        onBlur() {\n            this.focused = false;\n            this.focusedItem = null;\n            this.searchValue = '';\n        },\n        onKeyDown(event) {\n            const metaKey = event.metaKey || event.ctrlKey;\n\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onArrowUpKey(event);\n                    break;\n\n                case 'ArrowLeft':\n                    this.onArrowLeftKey(event);\n                    break;\n\n                case 'ArrowRight':\n                    this.onArrowRightKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onEndKey(event);\n                    break;\n\n                case 'Space':\n                    this.onSpaceKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                    this.onEnterKey(event);\n                    break;\n\n                case 'Escape':\n                case 'Tab':\n                case 'PageDown':\n                case 'PageUp':\n                case 'Backspace':\n                case 'ShiftLeft':\n                case 'ShiftRight':\n                    //NOOP\n                    break;\n\n                default:\n                    if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n                        this.searchItems(event, event.key);\n                    }\n\n                    break;\n            }\n        },\n        onArrowDownKey(event) {\n            const processedItem = ObjectUtils.isNotEmpty(this.focusedItem) ? this.findNextItem(this.focusedItem) : this.findFirstItem();\n\n            this.changeFocusedItem({ originalEvent: event, processedItem, focusOnNext: true });\n            event.preventDefault();\n        },\n        onArrowUpKey(event) {\n            const processedItem = ObjectUtils.isNotEmpty(this.focusedItem) ? this.findPrevItem(this.focusedItem) : this.findLastItem();\n\n            this.changeFocusedItem({ originalEvent: event, processedItem, selfCheck: true });\n            event.preventDefault();\n        },\n        onArrowLeftKey(event) {\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const matched = this.activeItemPath.some((p) => p.key === this.focusedItem.key);\n\n                if (matched) {\n                    this.activeItemPath = this.activeItemPath.filter((p) => p.key !== this.focusedItem.key);\n                } else {\n                    this.focusedItem = ObjectUtils.isNotEmpty(this.focusedItem.parent) ? this.focusedItem.parent : this.focusedItem;\n                }\n\n                event.preventDefault();\n            }\n        },\n        onArrowRightKey(event) {\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const grouped = this.isItemGroup(this.focusedItem);\n\n                if (grouped) {\n                    const matched = this.activeItemPath.some((p) => p.key === this.focusedItem.key);\n\n                    if (matched) {\n                        this.onArrowDownKey(event);\n                    } else {\n                        this.activeItemPath = this.activeItemPath.filter((p) => p.parentKey !== this.focusedItem.parentKey);\n                        this.activeItemPath.push(this.focusedItem);\n                    }\n                }\n\n                event.preventDefault();\n            }\n        },\n        onHomeKey(event) {\n            this.changeFocusedItem({ originalEvent: event, processedItem: this.findFirstItem(), allowHeaderFocus: false });\n            event.preventDefault();\n        },\n        onEndKey(event) {\n            this.changeFocusedItem({ originalEvent: event, processedItem: this.findLastItem(), focusOnNext: true, allowHeaderFocus: false });\n            event.preventDefault();\n        },\n        onEnterKey(event) {\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const element = DomHandler.findSingle(this.$el, `li[id=\"${`${this.focusedItemId}`}\"]`);\n                const anchorElement = element && (DomHandler.findSingle(element, '[data-pc-section=\"itemlink\"]') || DomHandler.findSingle(element, 'a,button'));\n\n                anchorElement ? anchorElement.click() : element && element.click();\n            }\n\n            event.preventDefault();\n        },\n        onSpaceKey(event) {\n            this.onEnterKey(event);\n        },\n        onItemToggle(event) {\n            const { processedItem, expanded } = event;\n\n            if (this.expandedKeys) {\n                this.$emit('item-toggle', { item: processedItem.item, expanded });\n            } else {\n                this.activeItemPath = this.activeItemPath.filter((p) => p.parentKey !== processedItem.parentKey);\n                expanded && this.activeItemPath.push(processedItem);\n            }\n\n            this.focusedItem = processedItem;\n            DomHandler.focus(this.$el);\n        },\n        onItemMouseMove(event) {\n            if (this.focused) {\n                this.focusedItem = event.processedItem;\n            }\n        },\n        isElementInPanel(event, element) {\n            const panel = event.currentTarget.closest('[data-pc-section=\"panel\"]');\n\n            return panel && panel.contains(element);\n        },\n        isItemMatched(processedItem) {\n            return this.isValidItem(processedItem) && this.getItemLabel(processedItem)?.toLocaleLowerCase(this.searchLocale).startsWith(this.searchValue.toLocaleLowerCase(this.searchLocale));\n        },\n        isVisibleItem(processedItem) {\n            return !!processedItem && (processedItem.level === 0 || this.isItemActive(processedItem)) && this.isItemVisible(processedItem);\n        },\n        isValidItem(processedItem) {\n            return !!processedItem && !this.isItemDisabled(processedItem) && !this.getItemProp(processedItem, 'separator');\n        },\n        findFirstItem() {\n            return this.visibleItems.find((processedItem) => this.isValidItem(processedItem));\n        },\n        findLastItem() {\n            return ObjectUtils.findLast(this.visibleItems, (processedItem) => this.isValidItem(processedItem));\n        },\n        findNextItem(processedItem) {\n            const index = this.visibleItems.findIndex((item) => item.key === processedItem.key);\n            const matchedItem = index < this.visibleItems.length - 1 ? this.visibleItems.slice(index + 1).find((pItem) => this.isValidItem(pItem)) : undefined;\n\n            return matchedItem || processedItem;\n        },\n        findPrevItem(processedItem) {\n            const index = this.visibleItems.findIndex((item) => item.key === processedItem.key);\n            const matchedItem = index > 0 ? ObjectUtils.findLast(this.visibleItems.slice(0, index), (pItem) => this.isValidItem(pItem)) : undefined;\n\n            return matchedItem || processedItem;\n        },\n        searchItems(event, char) {\n            this.searchValue = (this.searchValue || '') + char;\n\n            let matchedItem = null;\n            let matched = false;\n\n            if (ObjectUtils.isNotEmpty(this.focusedItem)) {\n                const focusedItemIndex = this.visibleItems.findIndex((processedItem) => processedItem.key === this.focusedItem.key);\n\n                matchedItem = this.visibleItems.slice(focusedItemIndex).find((processedItem) => this.isItemMatched(processedItem));\n                matchedItem = ObjectUtils.isEmpty(matchedItem) ? this.visibleItems.slice(0, focusedItemIndex).find((processedItem) => this.isItemMatched(processedItem)) : matchedItem;\n            } else {\n                matchedItem = this.visibleItems.find((processedItem) => this.isItemMatched(processedItem));\n            }\n\n            if (ObjectUtils.isNotEmpty(matchedItem)) {\n                matched = true;\n            }\n\n            if (ObjectUtils.isEmpty(matchedItem) && ObjectUtils.isEmpty(this.focusedItem)) {\n                matchedItem = this.findFirstItem();\n            }\n\n            if (ObjectUtils.isNotEmpty(matchedItem)) {\n                this.changeFocusedItem({\n                    originalEvent: event,\n                    processedItem: matchedItem,\n                    allowHeaderFocus: false\n                });\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchTimeout = setTimeout(() => {\n                this.searchValue = '';\n                this.searchTimeout = null;\n            }, 500);\n\n            return matched;\n        },\n        changeFocusedItem(event) {\n            const { originalEvent, processedItem, focusOnNext, selfCheck, allowHeaderFocus = true } = event;\n\n            if (ObjectUtils.isNotEmpty(this.focusedItem) && this.focusedItem.key !== processedItem.key) {\n                this.focusedItem = processedItem;\n                this.scrollInView();\n            } else if (allowHeaderFocus) {\n                this.$emit('header-focus', { originalEvent, focusOnNext, selfCheck });\n            }\n        },\n        scrollInView() {\n            const element = DomHandler.findSingle(this.$el, `li[id=\"${`${this.focusedItemId}`}\"]`);\n\n            if (element) {\n                element.scrollIntoView && element.scrollIntoView({ block: 'nearest', inline: 'start' });\n            }\n        },\n        autoUpdateActiveItemPath(expandedKeys) {\n            this.activeItemPath = Object.entries(expandedKeys || {}).reduce((acc, [key, val]) => {\n                if (val) {\n                    const processedItem = this.findProcessedItemByItemKey(key);\n\n                    processedItem && acc.push(processedItem);\n                }\n\n                return acc;\n            }, []);\n        },\n        findProcessedItemByItemKey(key, processedItems, level = 0) {\n            processedItems = processedItems || (level === 0 && this.processedItems);\n\n            if (!processedItems) return null;\n\n            for (let i = 0; i < processedItems.length; i++) {\n                const processedItem = processedItems[i];\n\n                if (this.getItemProp(processedItem, 'key') === key) return processedItem;\n\n                const matchedItem = this.findProcessedItemByItemKey(key, processedItem.items, level + 1);\n\n                if (matchedItem) return matchedItem;\n            }\n        },\n        createProcessedItems(items, level = 0, parent = {}, parentKey = '') {\n            const processedItems = [];\n\n            items &&\n                items.forEach((item, index) => {\n                    const key = (parentKey !== '' ? parentKey + '_' : '') + index;\n                    const newItem = {\n                        item,\n                        index,\n                        level,\n                        key,\n                        parent,\n                        parentKey\n                    };\n\n                    newItem['items'] = this.createProcessedItems(item.items, level + 1, newItem, key);\n                    processedItems.push(newItem);\n                });\n\n            return processedItems;\n        },\n        flatItems(processedItems, processedFlattenItems = []) {\n            processedItems &&\n                processedItems.forEach((processedItem) => {\n                    if (this.isVisibleItem(processedItem)) {\n                        processedFlattenItems.push(processedItem);\n                        this.flatItems(processedItem.items, processedFlattenItems);\n                    }\n                });\n\n            return processedFlattenItems;\n        }\n    },\n    computed: {\n        processedItems() {\n            return this.createProcessedItems(this.items || []);\n        },\n        visibleItems() {\n            return this.flatItems(this.processedItems);\n        },\n        focusedItemId() {\n            return ObjectUtils.isNotEmpty(this.focusedItem) ? `${this.panelId}_${this.focusedItem.key}` : null;\n        }\n    },\n    components: {\n        PanelMenuSub: PanelMenuSub\n    }\n};\n</script>\n", "<template>\n    <div :id=\"id\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-for=\"(item, index) of model\" :key=\"getPanelKey(index)\">\n            <div v-if=\"isItemVisible(item)\" :style=\"getItemProp(item, 'style')\" :class=\"[cx('panel'), getItemProp(item, 'class')]\" v-bind=\"ptm('panel')\">\n                <div\n                    :id=\"getHeaderId(index)\"\n                    :class=\"[cx('header', { item }), getItemProp(item, 'headerClass')]\"\n                    :tabindex=\"isItemDisabled(item) ? -1 : tabindex\"\n                    role=\"button\"\n                    :aria-label=\"getItemLabel(item)\"\n                    :aria-expanded=\"isItemActive(item)\"\n                    :aria-controls=\"getContentId(index)\"\n                    :aria-disabled=\"isItemDisabled(item)\"\n                    @click=\"onHeaderClick($event, item)\"\n                    @keydown=\"onHeaderKeyDown($event, item)\"\n                    v-bind=\"getPTOptions('header', item, index)\"\n                    :data-p-active=\"isItemActive(item)\"\n                    :data-p-disabled=\"isItemDisabled(item)\"\n                >\n                    <div :class=\"cx('headerContent')\" v-bind=\"getPTOptions('headerContent', item, index)\">\n                        <template v-if=\"!$slots.item\">\n                            <a :href=\"getItemProp(item, 'url')\" :class=\"cx('headerLink')\" :tabindex=\"-1\" v-bind=\"getPTOptions('headerLink', item, index)\">\n                                <slot v-if=\"getItemProp(item, 'items')\" name=\"submenuicon\" :active=\"isItemActive(item)\">\n                                    <component :is=\"isItemActive(item) ? 'ChevronDownIcon' : 'ChevronRightIcon'\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions('submenuIcon', item, index)\" />\n                                </slot>\n                                <component v-if=\"$slots.headericon\" :is=\"$slots.headericon\" :item=\"item\" :class=\"[cx('headerIcon'), getItemProp(item, 'icon')]\" />\n                                <span v-else-if=\"getItemProp(item, 'icon')\" :class=\"[cx('headerIcon'), getItemProp(item, 'icon')]\" v-bind=\"getPTOptions('headerIcon', item, index)\" />\n                                <span :class=\"cx('headerLabel')\" v-bind=\"getPTOptions('headerLabel', item, index)\">{{ getItemLabel(item) }}</span>\n                            </a>\n                        </template>\n                        <component v-else :is=\"$slots.item\" :item=\"item\" :root=\"true\" :active=\"isItemActive(item)\" :hasSubmenu=\"getItemProp(item, 'items')\" :label=\"getItemLabel(item)\" :props=\"getMenuItemProps(item, index)\"></component>\n                    </div>\n                </div>\n                <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n                    <div v-show=\"isItemActive(item)\" :id=\"getContentId(index)\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"getHeaderId(index)\" v-bind=\"ptm('contentContainer')\">\n                        <div v-if=\"getItemProp(item, 'items')\" :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                            <PanelMenuList\n                                :panelId=\"getPanelId(index)\"\n                                :items=\"getItemProp(item, 'items')\"\n                                :templates=\"$slots\"\n                                :expandedKeys=\"expandedKeys\"\n                                @item-toggle=\"changeExpandedKeys\"\n                                @header-focus=\"updateFocusedHeader\"\n                                :pt=\"pt\"\n                                :unstyled=\"unstyled\"\n                            />\n                        </div>\n                    </div>\n                </transition>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport { mergeProps } from 'vue';\nimport BasePanelMenu from './BasePanelMenu.vue';\nimport PanelMenuList from './PanelMenuList.vue';\n\nexport default {\n    name: 'PanelMenu',\n    extends: BasePanelMenu,\n    inheritAttrs: false,\n    emits: ['update:expandedKeys', 'panel-open', 'panel-close'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            activeItem: null,\n            activeItems: []\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        getItemProp(item, name) {\n            return item ? ObjectUtils.getItemValue(item[name]) : undefined;\n        },\n        getItemLabel(item) {\n            return this.getItemProp(item, 'label');\n        },\n        getPTOptions(key, item, index) {\n            return this.ptm(key, {\n                context: {\n                    index,\n                    active: this.isItemActive(item),\n                    focused: this.isItemFocused(item),\n                    disabled: this.isItemDisabled(item)\n                }\n            });\n        },\n        isItemActive(item) {\n            return this.expandedKeys ? this.expandedKeys[this.getItemProp(item, 'key')] : this.multiple ? this.activeItems.some((subItem) => ObjectUtils.equals(item, subItem)) : ObjectUtils.equals(item, this.activeItem);\n        },\n        isItemVisible(item) {\n            return this.getItemProp(item, 'visible') !== false;\n        },\n        isItemDisabled(item) {\n            return this.getItemProp(item, 'disabled');\n        },\n        isItemFocused(item) {\n            return ObjectUtils.equals(item, this.activeItem);\n        },\n        getPanelId(index) {\n            return `${this.id}_${index}`;\n        },\n        getPanelKey(index) {\n            return this.getPanelId(index);\n        },\n        getHeaderId(index) {\n            return `${this.getPanelId(index)}_header`;\n        },\n        getContentId(index) {\n            return `${this.getPanelId(index)}_content`;\n        },\n        onHeaderClick(event, item) {\n            if (this.isItemDisabled(item)) {\n                event.preventDefault();\n\n                return;\n            }\n\n            if (item.command) {\n                item.command({ originalEvent: event, item });\n            }\n\n            this.changeActiveItem(event, item);\n            DomHandler.focus(event.currentTarget);\n        },\n        onHeaderKeyDown(event, item) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onHeaderArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onHeaderArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHeaderHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onHeaderEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onHeaderEnterKey(event, item);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onHeaderArrowDownKey(event) {\n            const rootList = DomHandler.getAttribute(event.currentTarget, 'data-p-active') === true ? DomHandler.findSingle(event.currentTarget.nextElementSibling, '[data-pc-section=\"rootlist\"]') : null;\n\n            rootList ? DomHandler.focus(rootList) : this.updateFocusedHeader({ originalEvent: event, focusOnNext: true });\n            event.preventDefault();\n        },\n        onHeaderArrowUpKey(event) {\n            const prevHeader = this.findPrevHeader(event.currentTarget.parentElement) || this.findLastHeader();\n            const rootList = DomHandler.getAttribute(prevHeader, 'data-p-active') === true ? DomHandler.findSingle(prevHeader.nextElementSibling, '[data-pc-section=\"rootlist\"]') : null;\n\n            rootList ? DomHandler.focus(rootList) : this.updateFocusedHeader({ originalEvent: event, focusOnNext: false });\n            event.preventDefault();\n        },\n        onHeaderHomeKey(event) {\n            this.changeFocusedHeader(event, this.findFirstHeader());\n            event.preventDefault();\n        },\n        onHeaderEndKey(event) {\n            this.changeFocusedHeader(event, this.findLastHeader());\n            event.preventDefault();\n        },\n        onHeaderEnterKey(event, item) {\n            const headerAction = DomHandler.findSingle(event.currentTarget, '[data-pc-section=\"headerlink\"]');\n\n            headerAction ? headerAction.click() : this.onHeaderClick(event, item);\n            event.preventDefault();\n        },\n        findNextHeader(panelElement, selfCheck = false) {\n            const nextPanelElement = selfCheck ? panelElement : panelElement.nextElementSibling;\n            const headerElement = DomHandler.findSingle(nextPanelElement, '[data-pc-section=\"header\"]');\n\n            return headerElement ? (DomHandler.getAttribute(headerElement, 'data-p-disabled') ? this.findNextHeader(headerElement.parentElement) : headerElement) : null;\n        },\n        findPrevHeader(panelElement, selfCheck = false) {\n            const prevPanelElement = selfCheck ? panelElement : panelElement.previousElementSibling;\n            const headerElement = DomHandler.findSingle(prevPanelElement, '[data-pc-section=\"header\"]');\n\n            return headerElement ? (DomHandler.getAttribute(headerElement, 'data-p-disabled') ? this.findPrevHeader(headerElement.parentElement) : headerElement) : null;\n        },\n        findFirstHeader() {\n            return this.findNextHeader(this.$el.firstElementChild, true);\n        },\n        findLastHeader() {\n            return this.findPrevHeader(this.$el.lastElementChild, true);\n        },\n        updateFocusedHeader(event) {\n            const { originalEvent, focusOnNext, selfCheck } = event;\n            const panelElement = originalEvent.currentTarget.closest('[data-pc-section=\"panel\"]');\n            const header = selfCheck ? DomHandler.findSingle(panelElement, '[data-pc-section=\"header\"]') : focusOnNext ? this.findNextHeader(panelElement) : this.findPrevHeader(panelElement);\n\n            header ? this.changeFocusedHeader(originalEvent, header) : focusOnNext ? this.onHeaderHomeKey(originalEvent) : this.onHeaderEndKey(originalEvent);\n        },\n        changeActiveItem(event, item, selfActive = false) {\n            if (!this.isItemDisabled(item)) {\n                const active = this.isItemActive(item);\n                const eventName = !active ? 'panel-open' : 'panel-close';\n\n                this.activeItem = selfActive ? item : this.activeItem && ObjectUtils.equals(item, this.activeItem) ? null : item;\n\n                if (this.multiple) {\n                    // activeItem and activeItems should be separated because it should be only one focused root item\n                    if (this.activeItems.some((subItem) => ObjectUtils.equals(item, subItem))) {\n                        this.activeItems = this.activeItems.filter((subItem) => !ObjectUtils.equals(item, subItem));\n                    } else {\n                        this.activeItems.push(item);\n                    }\n                }\n\n                this.changeExpandedKeys({ item, expanded: !active });\n                this.$emit(eventName, { originalEvent: event, item });\n            }\n        },\n        changeExpandedKeys({ item, expanded = false }) {\n            if (this.expandedKeys) {\n                let _keys = { ...this.expandedKeys };\n\n                if (expanded) _keys[item.key] = true;\n                else delete _keys[item.key];\n\n                this.$emit('update:expandedKeys', _keys);\n            }\n        },\n        changeFocusedHeader(event, element) {\n            element && DomHandler.focus(element);\n        },\n        getMenuItemProps(item, index) {\n            return {\n                icon: mergeProps(\n                    {\n                        class: [this.cx('headerIcon'), this.getItemProp(item, 'icon')]\n                    },\n                    this.getPTOptions('headerIcon', item, index)\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('headerLabel')\n                    },\n                    this.getPTOptions('headerLabel', item, index)\n                )\n            };\n        }\n    },\n    components: {\n        PanelMenuList: PanelMenuList,\n        ChevronRightIcon: ChevronRightIcon,\n        ChevronDownIcon: ChevronDownIcon\n    }\n};\n</script>\n", "<template>\n    <div :id=\"id\" :class=\"cx('root')\" v-bind=\"ptmi('root')\">\n        <template v-for=\"(item, index) of model\" :key=\"getPanelKey(index)\">\n            <div v-if=\"isItemVisible(item)\" :style=\"getItemProp(item, 'style')\" :class=\"[cx('panel'), getItemProp(item, 'class')]\" v-bind=\"ptm('panel')\">\n                <div\n                    :id=\"getHeaderId(index)\"\n                    :class=\"[cx('header', { item }), getItemProp(item, 'headerClass')]\"\n                    :tabindex=\"isItemDisabled(item) ? -1 : tabindex\"\n                    role=\"button\"\n                    :aria-label=\"getItemLabel(item)\"\n                    :aria-expanded=\"isItemActive(item)\"\n                    :aria-controls=\"getContentId(index)\"\n                    :aria-disabled=\"isItemDisabled(item)\"\n                    @click=\"onHeaderClick($event, item)\"\n                    @keydown=\"onHeaderKeyDown($event, item)\"\n                    v-bind=\"getPTOptions('header', item, index)\"\n                    :data-p-active=\"isItemActive(item)\"\n                    :data-p-disabled=\"isItemDisabled(item)\"\n                >\n                    <div :class=\"cx('headerContent')\" v-bind=\"getPTOptions('headerContent', item, index)\">\n                        <template v-if=\"!$slots.item\">\n                            <a :href=\"getItemProp(item, 'url')\" :class=\"cx('headerLink')\" :tabindex=\"-1\" v-bind=\"getPTOptions('headerLink', item, index)\">\n                                <slot v-if=\"getItemProp(item, 'items')\" name=\"submenuicon\" :active=\"isItemActive(item)\">\n                                    <component :is=\"isItemActive(item) ? 'ChevronDownIcon' : 'ChevronRightIcon'\" :class=\"cx('submenuIcon')\" v-bind=\"getPTOptions('submenuIcon', item, index)\" />\n                                </slot>\n                                <component v-if=\"$slots.headericon\" :is=\"$slots.headericon\" :item=\"item\" :class=\"[cx('headerIcon'), getItemProp(item, 'icon')]\" />\n                                <span v-else-if=\"getItemProp(item, 'icon')\" :class=\"[cx('headerIcon'), getItemProp(item, 'icon')]\" v-bind=\"getPTOptions('headerIcon', item, index)\" />\n                                <span :class=\"cx('headerLabel')\" v-bind=\"getPTOptions('headerLabel', item, index)\">{{ getItemLabel(item) }}</span>\n                            </a>\n                        </template>\n                        <component v-else :is=\"$slots.item\" :item=\"item\" :root=\"true\" :active=\"isItemActive(item)\" :hasSubmenu=\"getItemProp(item, 'items')\" :label=\"getItemLabel(item)\" :props=\"getMenuItemProps(item, index)\"></component>\n                    </div>\n                </div>\n                <transition name=\"p-toggleable-content\" v-bind=\"ptm('transition')\">\n                    <div v-show=\"isItemActive(item)\" :id=\"getContentId(index)\" :class=\"cx('contentContainer')\" role=\"region\" :aria-labelledby=\"getHeaderId(index)\" v-bind=\"ptm('contentContainer')\">\n                        <div v-if=\"getItemProp(item, 'items')\" :class=\"cx('content')\" v-bind=\"ptm('content')\">\n                            <PanelMenuList\n                                :panelId=\"getPanelId(index)\"\n                                :items=\"getItemProp(item, 'items')\"\n                                :templates=\"$slots\"\n                                :expandedKeys=\"expandedKeys\"\n                                @item-toggle=\"changeExpandedKeys\"\n                                @header-focus=\"updateFocusedHeader\"\n                                :pt=\"pt\"\n                                :unstyled=\"unstyled\"\n                            />\n                        </div>\n                    </div>\n                </transition>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils, UniqueComponentId } from '@primevue/core/utils';\nimport ChevronDownIcon from '@primevue/icons/chevrondown';\nimport ChevronRightIcon from '@primevue/icons/chevronright';\nimport { mergeProps } from 'vue';\nimport BasePanelMenu from './BasePanelMenu.vue';\nimport PanelMenuList from './PanelMenuList.vue';\n\nexport default {\n    name: 'PanelMenu',\n    extends: BasePanelMenu,\n    inheritAttrs: false,\n    emits: ['update:expandedKeys', 'panel-open', 'panel-close'],\n    data() {\n        return {\n            id: this.$attrs.id,\n            activeItem: null,\n            activeItems: []\n        };\n    },\n    watch: {\n        '$attrs.id': function (newValue) {\n            this.id = newValue || UniqueComponentId();\n        }\n    },\n    mounted() {\n        this.id = this.id || UniqueComponentId();\n    },\n    methods: {\n        getItemProp(item, name) {\n            return item ? ObjectUtils.getItemValue(item[name]) : undefined;\n        },\n        getItemLabel(item) {\n            return this.getItemProp(item, 'label');\n        },\n        getPTOptions(key, item, index) {\n            return this.ptm(key, {\n                context: {\n                    index,\n                    active: this.isItemActive(item),\n                    focused: this.isItemFocused(item),\n                    disabled: this.isItemDisabled(item)\n                }\n            });\n        },\n        isItemActive(item) {\n            return this.expandedKeys ? this.expandedKeys[this.getItemProp(item, 'key')] : this.multiple ? this.activeItems.some((subItem) => ObjectUtils.equals(item, subItem)) : ObjectUtils.equals(item, this.activeItem);\n        },\n        isItemVisible(item) {\n            return this.getItemProp(item, 'visible') !== false;\n        },\n        isItemDisabled(item) {\n            return this.getItemProp(item, 'disabled');\n        },\n        isItemFocused(item) {\n            return ObjectUtils.equals(item, this.activeItem);\n        },\n        getPanelId(index) {\n            return `${this.id}_${index}`;\n        },\n        getPanelKey(index) {\n            return this.getPanelId(index);\n        },\n        getHeaderId(index) {\n            return `${this.getPanelId(index)}_header`;\n        },\n        getContentId(index) {\n            return `${this.getPanelId(index)}_content`;\n        },\n        onHeaderClick(event, item) {\n            if (this.isItemDisabled(item)) {\n                event.preventDefault();\n\n                return;\n            }\n\n            if (item.command) {\n                item.command({ originalEvent: event, item });\n            }\n\n            this.changeActiveItem(event, item);\n            DomHandler.focus(event.currentTarget);\n        },\n        onHeaderKeyDown(event, item) {\n            switch (event.code) {\n                case 'ArrowDown':\n                    this.onHeaderArrowDownKey(event);\n                    break;\n\n                case 'ArrowUp':\n                    this.onHeaderArrowUpKey(event);\n                    break;\n\n                case 'Home':\n                    this.onHeaderHomeKey(event);\n                    break;\n\n                case 'End':\n                    this.onHeaderEndKey(event);\n                    break;\n\n                case 'Enter':\n                case 'NumpadEnter':\n                case 'Space':\n                    this.onHeaderEnterKey(event, item);\n                    break;\n\n                default:\n                    break;\n            }\n        },\n        onHeaderArrowDownKey(event) {\n            const rootList = DomHandler.getAttribute(event.currentTarget, 'data-p-active') === true ? DomHandler.findSingle(event.currentTarget.nextElementSibling, '[data-pc-section=\"rootlist\"]') : null;\n\n            rootList ? DomHandler.focus(rootList) : this.updateFocusedHeader({ originalEvent: event, focusOnNext: true });\n            event.preventDefault();\n        },\n        onHeaderArrowUpKey(event) {\n            const prevHeader = this.findPrevHeader(event.currentTarget.parentElement) || this.findLastHeader();\n            const rootList = DomHandler.getAttribute(prevHeader, 'data-p-active') === true ? DomHandler.findSingle(prevHeader.nextElementSibling, '[data-pc-section=\"rootlist\"]') : null;\n\n            rootList ? DomHandler.focus(rootList) : this.updateFocusedHeader({ originalEvent: event, focusOnNext: false });\n            event.preventDefault();\n        },\n        onHeaderHomeKey(event) {\n            this.changeFocusedHeader(event, this.findFirstHeader());\n            event.preventDefault();\n        },\n        onHeaderEndKey(event) {\n            this.changeFocusedHeader(event, this.findLastHeader());\n            event.preventDefault();\n        },\n        onHeaderEnterKey(event, item) {\n            const headerAction = DomHandler.findSingle(event.currentTarget, '[data-pc-section=\"headerlink\"]');\n\n            headerAction ? headerAction.click() : this.onHeaderClick(event, item);\n            event.preventDefault();\n        },\n        findNextHeader(panelElement, selfCheck = false) {\n            const nextPanelElement = selfCheck ? panelElement : panelElement.nextElementSibling;\n            const headerElement = DomHandler.findSingle(nextPanelElement, '[data-pc-section=\"header\"]');\n\n            return headerElement ? (DomHandler.getAttribute(headerElement, 'data-p-disabled') ? this.findNextHeader(headerElement.parentElement) : headerElement) : null;\n        },\n        findPrevHeader(panelElement, selfCheck = false) {\n            const prevPanelElement = selfCheck ? panelElement : panelElement.previousElementSibling;\n            const headerElement = DomHandler.findSingle(prevPanelElement, '[data-pc-section=\"header\"]');\n\n            return headerElement ? (DomHandler.getAttribute(headerElement, 'data-p-disabled') ? this.findPrevHeader(headerElement.parentElement) : headerElement) : null;\n        },\n        findFirstHeader() {\n            return this.findNextHeader(this.$el.firstElementChild, true);\n        },\n        findLastHeader() {\n            return this.findPrevHeader(this.$el.lastElementChild, true);\n        },\n        updateFocusedHeader(event) {\n            const { originalEvent, focusOnNext, selfCheck } = event;\n            const panelElement = originalEvent.currentTarget.closest('[data-pc-section=\"panel\"]');\n            const header = selfCheck ? DomHandler.findSingle(panelElement, '[data-pc-section=\"header\"]') : focusOnNext ? this.findNextHeader(panelElement) : this.findPrevHeader(panelElement);\n\n            header ? this.changeFocusedHeader(originalEvent, header) : focusOnNext ? this.onHeaderHomeKey(originalEvent) : this.onHeaderEndKey(originalEvent);\n        },\n        changeActiveItem(event, item, selfActive = false) {\n            if (!this.isItemDisabled(item)) {\n                const active = this.isItemActive(item);\n                const eventName = !active ? 'panel-open' : 'panel-close';\n\n                this.activeItem = selfActive ? item : this.activeItem && ObjectUtils.equals(item, this.activeItem) ? null : item;\n\n                if (this.multiple) {\n                    // activeItem and activeItems should be separated because it should be only one focused root item\n                    if (this.activeItems.some((subItem) => ObjectUtils.equals(item, subItem))) {\n                        this.activeItems = this.activeItems.filter((subItem) => !ObjectUtils.equals(item, subItem));\n                    } else {\n                        this.activeItems.push(item);\n                    }\n                }\n\n                this.changeExpandedKeys({ item, expanded: !active });\n                this.$emit(eventName, { originalEvent: event, item });\n            }\n        },\n        changeExpandedKeys({ item, expanded = false }) {\n            if (this.expandedKeys) {\n                let _keys = { ...this.expandedKeys };\n\n                if (expanded) _keys[item.key] = true;\n                else delete _keys[item.key];\n\n                this.$emit('update:expandedKeys', _keys);\n            }\n        },\n        changeFocusedHeader(event, element) {\n            element && DomHandler.focus(element);\n        },\n        getMenuItemProps(item, index) {\n            return {\n                icon: mergeProps(\n                    {\n                        class: [this.cx('headerIcon'), this.getItemProp(item, 'icon')]\n                    },\n                    this.getPTOptions('headerIcon', item, index)\n                ),\n                label: mergeProps(\n                    {\n                        class: this.cx('headerLabel')\n                    },\n                    this.getPTOptions('headerLabel', item, index)\n                )\n            };\n        }\n    },\n    components: {\n        PanelMenuList: PanelMenuList,\n        ChevronRightIcon: ChevronRightIcon,\n        ChevronDownIcon: ChevronDownIcon\n    }\n};\n</script>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,QAAQ,SAARA,OAAKC,MAAA;AAAA,MAAMC,KAAED,KAAFC;AAAE,SAAA,+EAAAC,OAIRD,GAAG,eAAe,GAACC,gDAAAA,EAAAA,OAIZD,GAAG,4BAA4B,GAAC,uBAAA,EAAAC,OAC9BD,GAAG,8BAA8B,GAAC,iDAAA,EAAAC,OAElCD,GAAG,8BAA8B,GAACC,gBAAAA,EAAAA,OACzCD,GAAG,uBAAuB,GAAC,wBAAA,EAAAC,OACnBD,GAAG,+BAA+B,GAAC,kBAAA,EAAAC,OACzCD,GAAG,yBAAyB,GAACC,8DAAAA,EAAAA,OAIxBD,GAAG,oCAAoC,GAAC,iCAAA,EAAAC,OAC9BD,GAAG,yCAAyC,GAAC,kCAAA,EAAAC,OAC5CD,GAAG,yCAAyC,GAACC,6DAAAA,EAAAA,OAIxDD,GAAG,mCAAmC,GAAC,oCAAA,EAAAC,OAC1BD,GAAG,2CAA2C,GAAC,qCAAA,EAAAC,OAC9CD,GAAG,2CAA2C,GAACC,8GAAAA,EAAAA,OAQ5DD,GAAG,8BAA8B,GAAC,gCAAA,EAAAC,OAC1BD,GAAG,+BAA+B,GAAC,UAAA,EAAAC,OAAWD,GAAG,+BAA+B,GAACC,kBAAAA,EAAAA,OAAmBD,GAAG,+BAA+B,GAAC,eAAA,EAAAC,OAAgBD,GAAG,+BAA+B,GAAC,iDAAA,EAAAC,OAE1MD,GAAG,sBAAsB,GAACC,mEAAAA,EAAAA,OAK5BD,GAAG,oBAAoB,GAAC,kBAAA,EAAAC,OACpBD,GAAG,wBAAwB,GAAC,4NAAA,EAAAC,OAW9BD,GAAG,2BAA2B,GAAC,kDAAA,EAAAC,OAI/BD,GAAG,8BAA8B,GAAC,4GAAA,EAAAC,OAI7BD,GAAG,iCAAiC,GAACC,gBAAAA,EAAAA,OAC1CD,GAAG,4BAA4B,GAAC,gIAAA,EAAAC,OAIhCD,GAAG,iCAAiC,GAAC,iIAAA,EAAAC,OAIrCD,GAAG,oCAAoC,GAACC,oGAAAA,EAAAA,OAInCD,GAAG,iCAAiC,GAAC,gBAAA,EAAAC,OAC1CD,GAAG,4BAA4B,GAAC,wHAAA,EAAAC,OAIhCD,GAAG,iCAAiC,GAACC,yHAAAA,EAAAA,OAIrCD,GAAG,oCAAoC,GAAC,qEAAA,EAAAC,OAKhCD,GAAG,0BAA0B,GAAC,yGAAA,EAAAC,OAOxCD,GAAG,oBAAoB,GAACC,kBAAAA,EAAAA,OACpBD,GAAG,wBAAwB,GAAC,wRAAA,EAAAC,OAetBD,GAAG,8BAA8B,GAAC,gCAAA,EAAAC,OAC1BD,GAAG,+BAA+B,GAACC,UAAAA,EAAAA,OAAWD,GAAG,+BAA+B,GAAC,kBAAA,EAAAC,OAAmBD,GAAG,+BAA+B,GAAC,eAAA,EAAAC,OAAgBD,GAAG,+BAA+B,GAACC,gBAAAA,EAAAA,OAC1MD,GAAG,sBAAsB,GAAC,oHAAA,EAAAC,OAKrBD,GAAG,iCAAiC,GAAC,gBAAA,EAAAC,OAC1CD,GAAG,4BAA4B,GAACC,qGAAAA,EAAAA,OAIhCD,GAAG,4BAA4B,GAAC,wGAAA,EAAAC,OAIhCD,GAAG,oCAAoC,GAAC,kGAAA,EAAAC,OAInCD,GAAG,iCAAiC,GAACC,gBAAAA,EAAAA,OAC1CD,GAAG,4BAA4B,GAAC,oHAAA,EAAAC,OAIhCD,GAAG,iCAAiC,GAACC,uHAAAA,EAAAA,OAIrCD,GAAG,oCAAoC,GAAC,QAAA;AAAA;AAIrD,IAAME,UAAU;EACZC,MAAM;EACNC,OAAO;EACPC,QAAQ,SAAAA,OAAAC,OAAA;AAAA,QAAGC,WAAQD,MAARC,UAAUC,QAAIF,MAAJE;AAAI,WAAO,CAC5B,sBACA;MACI,6BAA6BD,SAASE,aAAaD,KAAI,KAAK,CAAC,CAACA,MAAKE;MACnE,cAAcH,SAASI,eAAeH,KAAI;IAC9C,CAAC;EACJ;EACDI,eAAe;EACfC,YAAY;EACZC,YAAY;EACZC,aAAa;EACbC,kBAAkB;EAClBC,SAAS;EACTC,UAAU;EACVV,MAAM,SAAAA,KAAAW,OAAA;AAAA,QAAGZ,WAAQY,MAARZ,UAAUa,gBAAaD,MAAbC;AAAa,WAAO,CACnC,oBACA;MACI,WAAWb,SAASc,cAAcD,aAAa;MAC/C,cAAcb,SAASI,eAAeS,aAAa;IACvD,CAAC;EACJ;EACDE,aAAa;EACbC,UAAU;EACVC,UAAU;EACVC,WAAW;EACXC,aAAa;EACbC,SAAS;EACTC,WAAW;AACf;AAEA,IAAA,iBAAeC,UAAUC,OAAO;EAC5BC,MAAM;EACNjC;EACAI;AACJ,CAAC;;;ACpLD,IAAA,WAAe;EACX8B,MAAM;EACN,WAASC;EACTC,OAAO;IACHC,OAAO;MACHC,MAAMC;MACN,WAAS;;IAEbC,cAAc;MACVF,MAAMG;MACN,WAAS;;IAEbC,UAAU;MACNJ,MAAMK;MACN,WAAS;;IAEbC,UAAU;MACNN,MAAMO;MACN,WAAS;IACb;;EAEJC,OAAOC;EACPC,SAAO,SAAAA,UAAG;AACN,WAAO;MACHC,cAAc;MACdC,iBAAiB;;EAEzB;AACJ;ACiDA,IAAA,WAAe;EACXhB,MAAM;EACNiB,UAAU;EACV,WAAShB;EACTiB,OAAO,CAAC,eAAe,gBAAgB;EACvChB,OAAO;IACHiB,SAAS;MACLf,MAAMgB;MACN,WAAS;;IAEbC,eAAe;MACXjB,MAAMgB;MACN,WAAS;;IAEbE,OAAO;MACHlB,MAAMC;MACN,WAAS;;IAEbkB,OAAO;MACHnB,MAAMO;MACN,WAAS;;IAEba,WAAW;MACPpB,MAAMG;MACN,WAAS;;IAEbkB,gBAAgB;MACZrB,MAAMG;MACN,WAAS;;IAEbG,UAAU;MACNN,MAAMO;MACN,WAAS;IACb;;EAEJe,SAAS;IACLC,WAAS,SAAAA,UAACC,eAAe;AACrB,aAAAC,GAAAA,OAAU,KAAKV,SAAO,GAAA,EAAAU,OAAID,cAAcE,GAAG;;IAE/CC,YAAU,SAAAA,WAACH,eAAe;AACtB,aAAO,KAAKD,UAAUC,aAAa;;IAEvCI,aAAW,SAAAA,YAACJ,eAAe5B,MAAMiC,QAAQ;AACrC,aAAOL,iBAAiBA,cAAcM,OAAOC,YAAYC,aAAaR,cAAcM,KAAKlC,IAAI,GAAGiC,MAAM,IAAII;;IAE9GC,cAAY,SAAAA,aAACV,eAAe;AACxB,aAAO,KAAKI,YAAYJ,eAAe,OAAO;;IAElDW,cAAY,SAAAA,aAACT,KAAKF,eAAeY,OAAO;AACpC,aAAO,KAAKC,IAAIX,KAAK;QACjBY,SAAS;UACLR,MAAMN;UACNY;UACAG,QAAQ,KAAKC,aAAahB,aAAa;UACvCiB,SAAS,KAAKC,cAAclB,aAAa;UACzCmB,UAAU,KAAKC,eAAepB,aAAa;QAC/C;MACJ,CAAC;;IAELgB,cAAY,SAAAA,aAAChB,eAAe;AACxB,aAAO,KAAKH,eAAewB,KAAK,SAACC,MAAI;AAAA,eAAKA,KAAKpB,QAAQF,cAAcE;OAAI;;IAE7EqB,eAAa,SAAAA,cAACvB,eAAe;AACzB,aAAO,KAAKI,YAAYJ,eAAe,SAAS,MAAM;;IAE1DoB,gBAAc,SAAAA,eAACpB,eAAe;AAC1B,aAAO,KAAKI,YAAYJ,eAAe,UAAU;;IAErDkB,eAAa,SAAAA,cAAClB,eAAe;AACzB,aAAO,KAAKP,kBAAkB,KAAKM,UAAUC,aAAa;;IAE9DwB,aAAW,SAAAA,YAACxB,eAAe;AACvB,aAAOO,YAAYkB,WAAWzB,cAAcN,KAAK;;IAErDgC,aAAWA,SAAAA,YAACC,OAAO3B,eAAe;AAC9B,WAAKI,YAAYJ,eAAe,WAAW;QAAE4B,eAAeD;QAAOrB,MAAMN,cAAcM;MAAK,CAAC;AAC7F,WAAKuB,MAAM,eAAe;QAAE7B;QAAe8B,UAAU,CAAC,KAAKd,aAAahB,aAAa;MAAE,CAAC;;IAE5F+B,cAAY,SAAAA,aAACJ,OAAO;AAChB,WAAKE,MAAM,eAAeF,KAAK;;IAEnCK,iBAAeA,SAAAA,gBAACL,OAAO3B,eAAe;AAClC,WAAK6B,MAAM,kBAAkB;QAAED,eAAeD;QAAO3B;MAAc,CAAC;;IAExEiC,gBAAc,SAAAA,iBAAG;AAAA,UAAAC,QAAA;AACb,aAAO,KAAKxC,MAAMyC,OAAO,SAACnC,eAAa;AAAA,eAAKkC,MAAKX,cAAcvB,aAAa,KAAK,CAACkC,MAAK9B,YAAYJ,eAAe,WAAW;MAAC,CAAA,EAAEoC;;IAEpIC,iBAAe,SAAAA,gBAACzB,OAAO;AAAA,UAAA0B,SAAA;AACnB,aAAO1B,QAAQ,KAAKlB,MAAM6C,MAAM,GAAG3B,KAAK,EAAEuB,OAAO,SAACnC,eAAa;AAAA,eAAKsC,OAAKf,cAAcvB,aAAa,KAAKsC,OAAKlC,YAAYJ,eAAe,WAAW;OAAE,EAACoC,SAAS;;IAEpKI,kBAAgBA,SAAAA,iBAACxC,eAAeY,OAAO;AACnC,aAAO;QACH6B,QAAQC,WACJ;UACI,SAAO,KAAKC,GAAG,UAAU;UACzB7D,UAAU;UACV,eAAe;WAEnB,KAAK6B,aAAa,YAAYX,eAAeY,KAAK,CACtD;QACAgC,MAAMF,WACF;UACI,SAAO,CAAC,KAAKC,GAAG,UAAU,GAAG,KAAKvC,YAAYJ,eAAe,MAAM,CAAC;WAExE,KAAKW,aAAa,YAAYX,eAAeY,KAAK,CACtD;QACAiC,OAAOH,WACH;UACI,SAAO,KAAKC,GAAG,WAAW;WAE9B,KAAKhC,aAAa,aAAaX,eAAeY,KAAK,CACvD;QACAkC,aAAaJ,WACT;UACI,SAAO,KAAKC,GAAG,aAAa;WAEhC,KAAKhC,aAAa,eAAeX,eAAeY,KAAK,CACzD;;IAER;;EAEJmC,YAAY;IACRC,kBAAkBA;IAClBC,iBAAiBA;;EAErBC,YAAY;IACRC,QAAQC;EACZ;AACJ;;;;;;;;sBChNIC,mBAqEI,MAAA;IArEC,SAAA,eAAOC,KAAEX,GAAA,SAAA,CAAA;IAAc7D,UAAUyE,OAAQzE;OAC1C0E,UAAA,IAAA,GAAAH,mBAmEUI,UAnEiC,MAAAC,WAAAH,OAAA7D,OAAzB,SAAAM,eAAeY,OAAK;;MAAkBV,KAAAyD,SAAAxD,WAAWH,aAAa;QAElE2D,SAAApC,cAAcvB,aAAa,KAAM,CAAA2D,SAAAvD,YAAYJ,eAAa,WAAA,KADpEwD,UAAA,GAAAH,mBA0DI,MA1DJO,WA0DI;;MAxDCC,IAAIF,SAAS5D,UAACC,aAAa;MAC3B,SAAA,CAAQsD,KAAEX,GAAA,QAAA;QAAW3C;OAAkB,GAAA2D,SAAAvD,YAAYJ,eAAa,OAAA,CAAA;MAChEhB,OAAO2E,SAAWvD,YAACJ,eAAa,OAAA;MACjC8D,MAAK;MACJ,cAAYH,SAAYjD,aAACV,aAAa;MACtC,iBAAe2D,SAAAA,YAAY3D,aAAa,IAAI2D,SAAY3C,aAAChB,aAAa,IAAIS;MAC1E,cAAY8C,OAAI5D,QAAA;MAChB,gBAAcgE,SAAc1B,eAAA;MAC5B,iBAAe0B,SAAetB,gBAACzB,KAAK;;OAC7B+C,SAAYhD,aAAA,QAASX,eAAeY,KAAK,GAAA;MAChD,kBAAgB+C,SAAazC,cAAClB,aAAa;MAC3C,mBAAiB2D,SAAcvC,eAACpB,aAAa;SAE9C+D,gBAsBK,OAtBLH,WAsBK;MAtBC,SAAON,KAAEX,GAAA,aAAA;MAAkBqB,SAAO,SAAAA,QAAAC,QAAA;AAAA,eAAAN,SAAAjC,YAAYuC,QAAQjE,aAAa;;MAAIkE,aAAW,SAAAA,YAAAD,QAAA;AAAA,eAAAN,SAAA3B,gBAAgBiC,QAAQjE,aAAa;;;OAAW2D,SAAYhD,aAAA,eAAgBX,eAAeY,KAAK,CAAA,GAAA,CACnK,CAAA2C,OAAA3D,UAAUU,OACvB6D,gBAAAX,UAAA,GAAAH,mBAQG,KARHO,WAQG;;MARUQ,MAAMT,SAAWvD,YAACJ,eAAa,KAAA;MAAW,SAAOsD,KAAEX,GAAA,UAAA;MAAe0B,QAAQV,SAAWvD,YAACJ,eAAa,QAAA;MAAalB,UAAS;MAAK,eAAY;;OAAe6E,SAAYhD,aAAA,YAAaX,eAAeY,KAAK,CAAA,GAAA,CAC/L+C,SAAAnC,YAAYxB,aAAa,KAAA,UAAA,GAAzCqD,mBAGUI,UAAA;MAAAvD,KAAA;OAAA,CAFWqD,OAAA3D,UAAUkD,eAA3BU,UAAA,GAAAc,YAAiMC,wBAApJhB,OAAA3D,UAAUkD,WAAW,GAAlEc,WAAiM;;MAA5H,SAAON,KAAEX,GAAA,aAAA;MAAkB5B,QAAQ4C,SAAY3C,aAAChB,aAAa;;OAAW2D,SAAYhD,aAAA,eAAgBX,eAAeY,KAAK,CAAA,GAAA,MAAA,IAAA,CAAA,SAAA,QAAA,CAAA,MAC7L4C,UAAA,GAAAc,YAAoLC,wBAA7JZ,SAAA3C,aAAahB,aAAa,IAAA,oBAAA,kBAAA,GAAjD4D,WAAoL;;MAAtF,SAAON,KAAEX,GAAA,aAAA;;OAAyBgB,SAAYhD,aAAA,eAAgBX,eAAeY,KAAK,CAAA,GAAA,MAAA,IAAA,CAAA,OAAA,CAAA,EAAA,GAAA,EAAA,KAAA,mBAAA,IAAA,IAAA,GAEnK2C,OAAA3D,UAAU4E,YAAQ,UAAA,GAAnCF,YAAkHC,wBAAxEhB,OAAS3D,UAAC4E,QAAQ,GAAA;;MAAGlE,MAAMN,cAAcM;MAAO,SAAA,eAAOgD,KAAEX,GAAA,UAAA,CAAA;sCAClFgB,SAAAvD,YAAYJ,eAAa,MAAA,KAA1CwD,UAAA,GAAAH,mBAA4K,QAA5KO,WAA4K;;MAAtH,SAAQ,CAAAN,KAAAX,GAAgB,UAAA,GAAAgB,SAAAvD,YAAYJ,eAAa,MAAA,CAAA;;OAAoB2D,SAAYhD,aAAA,YAAaX,eAAeY,KAAK,CAAA,GAAA,MAAA,EAAA,KAAA,mBAAA,IAAA,IAAA,GACxKmD,gBAA+H,QAA/HH,WAA+H;MAAxH,SAAON,KAAEX,GAAA,WAAA;;OAAuBgB,SAAAhD,aAAY,aAAcX,eAAeY,KAAK,CAAM,GAAA6D,gBAAAd,SAAAjD,aAAaV,aAAa,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,YAAA,IAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,KAAA,UAAA,GAG7HsE,YASYC,wBAPHhB,OAAS3D,UAACU,IAAI,GAAA;;MAClBA,MAAMN,cAAcM;MACpBoE,MAAM;MACN3D,QAAQ4C,SAAY3C,aAAChB,aAAa;MAClC2E,YAAYhB,SAAWnC,YAACxB,aAAa;MACrC6C,OAAOc,SAAYjD,aAACV,aAAa;MACjC1B,OAAOqF,SAAAnB,iBAAiBxC,eAAeY,KAAK;0FAGrDgE,YAmBYC,YAnBZjB,WAmBY;MAnBAxF,MAAK;;OAA+BkF,KAAGzC,IAAA,YAAA,CAAA,GAAA;yBAC/C,WAAA;AAAA,eAiBK,CAjBLsD,eAAAJ,gBAiBK,OAjBLH,WAiBK;UAjBsC,SAAON,KAAEX,GAAA,kBAAA;;WAA8BW,KAAGzC,IAAA,kBAAA,CAAA,GAAA,CAEvE8C,SAAApC,cAAcvB,aAAa,KAAK2D,SAAAnC,YAAYxB,aAAa,KADnEwD,UAAA,GAAAc,YAeCQ,yBAfDlB,WAeC;;UAbIC,IAAIF,SAAS5D,UAACC,aAAa,IAAA;UAC5B8D,MAAK;UACJvE,SAASgE,OAAOhE;UAChBE,eAAe8D,OAAa9D;UAC5BC,OAAOM,cAAcN;UACrBC,OAAO4D,OAAI5D,QAAA;UACXC,WAAW2D,OAAS3D;UACpBC,gBAAgB0D,OAAc1D;UAC9BkC,cAAa4B,SAAY5B;UACzBgD,iBAAcC,OAAA,CAAA,MAAAA,OAAA,CAAA,IAAA,SAAAf,QAAA;AAAA,mBAAEX,KAAKzB,MAAA,kBAAmBoC,MAAM;UAAA;UAC9CgB,IAAI3B,KAAE2B;UACNC,UAAU5B,KAAQ4B;;WACX5B,KAAGzC,IAAA,SAAA,CAAA,GAAA,MAAA,IAAA,CAAA,MAAA,WAAA,iBAAA,SAAA,SAAA,aAAA,kBAAA,gBAAA,MAAA,UAAA,CAAA,KAAA,mBAAA,IAAA,IAAA,CAAA,GAAA,EAAA,GAAA,CAfN,CAAAsE,OAAAxB,SAAA3C,aAAahB,aAAa,CAAA,CAAA,CAAA,CAAA;;;kEAqBrC2D,SAAApC,cAAcvB,aAAa,KAAK2D,SAAAvD,YAAYJ,eAAa,WAAA,KADnEwD,UAAA,GAAAH,mBAMK,MANLO,WAMK;;MAJA5E,OAAO2E,SAAWvD,YAACJ,eAAa,OAAA;MAChC,SAAQ,CAAAsD,KAAAX,GAAiB,WAAA,GAAAgB,SAAAvD,YAAYJ,eAAa,OAAA,CAAA;MACnD8D,MAAK;;OACGR,KAAGzC,IAAA,WAAA,CAAA,GAAA,MAAA,EAAA,KAAA,mBAAA,IAAA,IAAA,CAAA,GAAA,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvC3B,IAAA,WAAe;EACXzC,MAAM;EACNiB,UAAU;EACV,WAAShB;EACTiB,OAAO,CAAC,eAAe,cAAc;EACrChB,OAAO;IACHiB,SAAS;MACLf,MAAMgB;MACN,WAAS;;IAEbE,OAAO;MACHlB,MAAMC;MACN,WAAS;;IAEbmB,WAAW;MACPpB,MAAMG;MACN,WAAS;;IAEbD,cAAc;MACVF,MAAMG;MACN,WAAS;IACb;;EAEJyG,eAAe;EACfC,aAAa;EACbC,MAAI,SAAAA,OAAG;AACH,WAAO;MACHrE,SAAS;MACTsE,aAAa;MACb1F,gBAAgB,CAAA;;;EAGxB2F,OAAO;IACH9G,cAAY,SAAAA,aAAC+G,UAAU;AACnB,WAAKC,yBAAyBD,QAAQ;IAC1C;;EAEJE,SAAO,SAAAA,UAAG;AACN,SAAKD,yBAAyB,KAAKhH,YAAY;;EAEnDoB,SAAS;IACLM,aAAWA,SAAAA,aAACJ,eAAe5B,MAAM;AAC7B,aAAO4B,iBAAiBA,cAAcM,OAAOC,YAAYC,aAAaR,cAAcM,KAAKlC,IAAI,CAAC,IAAIqC;;IAEtGC,cAAY,SAAAA,cAACV,eAAe;AACxB,aAAO,KAAKI,YAAYJ,eAAe,OAAO;;IAElDuB,eAAa,SAAAA,eAACvB,eAAe;AACzB,aAAO,KAAKI,YAAYJ,eAAe,SAAS,MAAM;;IAE1DoB,gBAAc,SAAAA,gBAACpB,eAAe;AAC1B,aAAO,KAAKI,YAAYJ,eAAe,UAAU;;IAErDgB,cAAY,SAAAA,cAAChB,eAAe;AACxB,aAAO,KAAKH,eAAewB,KAAK,SAACC,MAAI;AAAA,eAAKA,KAAKpB,QAAQF,cAAc4F;OAAU;;IAEnFpE,aAAW,SAAAA,aAACxB,eAAe;AACvB,aAAOO,YAAYkB,WAAWzB,cAAcN,KAAK;;IAErDmG,SAAO,SAAAA,QAAClE,OAAO;AACX,WAAKV,UAAU;AACf,WAAKsE,cAAc,KAAKA,gBAAgB,KAAKO,iBAAiBnE,OAAOA,MAAMoE,aAAa,IAAI,KAAKC,cAAa,IAAK,KAAKC,aAAY;;IAExIC,QAAM,SAAAA,SAAG;AACL,WAAKjF,UAAU;AACf,WAAKsE,cAAc;AACnB,WAAKF,cAAc;;IAEvBc,WAAS,SAAAA,UAACxE,OAAO;AACb,UAAMyE,UAAUzE,MAAMyE,WAAWzE,MAAM0E;AAEvC,cAAQ1E,MAAM2E,MAAI;QACd,KAAK;AACD,eAAKC,eAAe5E,KAAK;AACzB;QAEJ,KAAK;AACD,eAAK6E,aAAa7E,KAAK;AACvB;QAEJ,KAAK;AACD,eAAK8E,eAAe9E,KAAK;AACzB;QAEJ,KAAK;AACD,eAAK+E,gBAAgB/E,KAAK;AAC1B;QAEJ,KAAK;AACD,eAAKgF,UAAUhF,KAAK;AACpB;QAEJ,KAAK;AACD,eAAKiF,SAASjF,KAAK;AACnB;QAEJ,KAAK;AACD,eAAKkF,WAAWlF,KAAK;AACrB;QAEJ,KAAK;QACL,KAAK;AACD,eAAKmF,WAAWnF,KAAK;AACrB;QAEJ,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;QACL,KAAK;AAED;QAEJ;AACI,cAAI,CAACyE,WAAW7F,YAAYwG,qBAAqBpF,MAAMzB,GAAG,GAAG;AACzD,iBAAK8G,YAAYrF,OAAOA,MAAMzB,GAAG;UACrC;AAEA;MACR;;IAEJqG,gBAAc,SAAAA,eAAC5E,OAAO;AAClB,UAAM3B,gBAAgBO,YAAYkB,WAAW,KAAK8D,WAAW,IAAI,KAAK0B,aAAa,KAAK1B,WAAW,IAAI,KAAKS,cAAa;AAEzH,WAAKkB,kBAAkB;QAAEtF,eAAeD;QAAO3B;QAAemH,aAAa;MAAK,CAAC;AACjFxF,YAAMyF,eAAc;;IAExBZ,cAAY,SAAAA,aAAC7E,OAAO;AAChB,UAAM3B,gBAAgBO,YAAYkB,WAAW,KAAK8D,WAAW,IAAI,KAAK8B,aAAa,KAAK9B,WAAW,IAAI,KAAKU,aAAY;AAExH,WAAKiB,kBAAkB;QAAEtF,eAAeD;QAAO3B;QAAesH,WAAW;MAAK,CAAC;AAC/E3F,YAAMyF,eAAc;;IAExBX,gBAAc,SAAAA,eAAC9E,OAAO;AAAA,UAAAO,QAAA;AAClB,UAAI3B,YAAYkB,WAAW,KAAK8D,WAAW,GAAG;AAC1C,YAAMgC,UAAU,KAAK1H,eAAewB,KAAK,SAACmG,GAAC;AAAA,iBAAKA,EAAEtH,QAAQgC,MAAKqD,YAAYrF;SAAI;AAE/E,YAAIqH,SAAS;AACT,eAAK1H,iBAAiB,KAAKA,eAAesC,OAAO,SAACqF,GAAC;AAAA,mBAAKA,EAAEtH,QAAQgC,MAAKqD,YAAYrF;WAAI;QAC3F,OAAO;AACH,eAAKqF,cAAchF,YAAYkB,WAAW,KAAK8D,YAAYkC,MAAM,IAAI,KAAKlC,YAAYkC,SAAS,KAAKlC;QACxG;AAEA5D,cAAMyF,eAAc;MACxB;;IAEJV,iBAAe,SAAAA,gBAAC/E,OAAO;AAAA,UAAAW,SAAA;AACnB,UAAI/B,YAAYkB,WAAW,KAAK8D,WAAW,GAAG;AAC1C,YAAMmC,UAAU,KAAKlG,YAAY,KAAK+D,WAAW;AAEjD,YAAImC,SAAS;AACT,cAAMH,UAAU,KAAK1H,eAAewB,KAAK,SAACmG,GAAC;AAAA,mBAAKA,EAAEtH,QAAQoC,OAAKiD,YAAYrF;WAAI;AAE/E,cAAIqH,SAAS;AACT,iBAAKhB,eAAe5E,KAAK;UAC7B,OAAO;AACH,iBAAK9B,iBAAiB,KAAKA,eAAesC,OAAO,SAACqF,GAAC;AAAA,qBAAKA,EAAE5B,cAActD,OAAKiD,YAAYK;aAAU;AACnG,iBAAK/F,eAAe8H,KAAK,KAAKpC,WAAW;UAC7C;QACJ;AAEA5D,cAAMyF,eAAc;MACxB;;IAEJT,WAAS,SAAAA,UAAChF,OAAO;AACb,WAAKuF,kBAAkB;QAAEtF,eAAeD;QAAO3B,eAAe,KAAKgG,cAAa;QAAI4B,kBAAkB;MAAM,CAAC;AAC7GjG,YAAMyF,eAAc;;IAExBR,UAAQ,SAAAA,SAACjF,OAAO;AACZ,WAAKuF,kBAAkB;QAAEtF,eAAeD;QAAO3B,eAAe,KAAKiG,aAAY;QAAIkB,aAAa;QAAMS,kBAAkB;MAAM,CAAC;AAC/HjG,YAAMyF,eAAc;;IAExBN,YAAU,SAAAA,WAACnF,OAAO;AACd,UAAIpB,YAAYkB,WAAW,KAAK8D,WAAW,GAAG;AAC1C,YAAMsC,UAAUC,WAAWC,WAAW,KAAKC,KAAG/H,UAAAA,OAAA,GAAAA,OAAe,KAAKR,aAAa,GAAA,IAAA,CAAM;AACrF,YAAMwI,gBAAgBJ,YAAYC,WAAWC,WAAWF,SAAS,8BAA8B,KAAKC,WAAWC,WAAWF,SAAS,UAAU;AAE7II,wBAAgBA,cAAcC,MAAK,IAAKL,WAAWA,QAAQK,MAAK;MACpE;AAEAvG,YAAMyF,eAAc;;IAExBP,YAAU,SAAAA,WAAClF,OAAO;AACd,WAAKmF,WAAWnF,KAAK;;IAEzBI,cAAY,SAAAA,cAACJ,OAAO;AAChB,UAAQ3B,gBAA4B2B,MAA5B3B,eAAe8B,WAAaH,MAAbG;AAEvB,UAAI,KAAKpD,cAAc;AACnB,aAAKmD,MAAM,eAAe;UAAEvB,MAAMN,cAAcM;UAAMwB;QAAS,CAAC;MACpE,OAAO;AACH,aAAKjC,iBAAiB,KAAKA,eAAesC,OAAO,SAACqF,GAAC;AAAA,iBAAKA,EAAE5B,cAAc5F,cAAc4F;SAAU;AAChG9D,oBAAY,KAAKjC,eAAe8H,KAAK3H,aAAa;MACtD;AAEA,WAAKuF,cAAcvF;AACnB8H,iBAAWK,MAAM,KAAKH,GAAG;;IAE7BhG,iBAAe,SAAAA,iBAACL,OAAO;AACnB,UAAI,KAAKV,SAAS;AACd,aAAKsE,cAAc5D,MAAM3B;MAC7B;;IAEJ8F,kBAAgBA,SAAAA,iBAACnE,OAAOkG,SAAS;AAC7B,UAAMO,QAAQzG,MAAM0G,cAAcC,QAAQ,2BAA2B;AAErE,aAAOF,SAASA,MAAMG,SAASV,OAAO;;IAE1CW,eAAa,SAAAA,cAACxI,eAAe;AAAA,UAAAyI;AACzB,aAAO,KAAKC,YAAY1I,aAAa,OAAAyI,qBAAK,KAAK/H,aAAaV,aAAa,OAAC,QAAAyI,uBAAhCA,SAAAA,SAAAA,mBAAkCE,kBAAkB,KAAKC,YAAY,EAAEC,WAAW,KAAKxD,YAAYsD,kBAAkB,KAAKC,YAAY,CAAC;;IAErLE,eAAa,SAAAA,cAAC9I,eAAe;AACzB,aAAO,CAAC,CAACA,kBAAkBA,cAAcL,UAAU,KAAK,KAAKqB,aAAahB,aAAa,MAAM,KAAKuB,cAAcvB,aAAa;;IAEjI0I,aAAW,SAAAA,YAAC1I,eAAe;AACvB,aAAO,CAAC,CAACA,iBAAiB,CAAC,KAAKoB,eAAepB,aAAa,KAAK,CAAC,KAAKI,YAAYJ,eAAe,WAAW;;IAEjHgG,eAAa,SAAAA,gBAAG;AAAA,UAAA+C,SAAA;AACZ,aAAO,KAAKC,aAAaC,KAAK,SAACjJ,eAAa;AAAA,eAAK+I,OAAKL,YAAY1I,aAAa;OAAE;;IAErFiG,cAAY,SAAAA,eAAG;AAAA,UAAAiD,SAAA;AACX,aAAO3I,YAAY4I,SAAS,KAAKH,cAAc,SAAChJ,eAAa;AAAA,eAAKkJ,OAAKR,YAAY1I,aAAa;OAAE;;IAEtGiH,cAAY,SAAAA,aAACjH,eAAe;AAAA,UAAAoJ,SAAA;AACxB,UAAMxI,QAAQ,KAAKoI,aAAaK,UAAU,SAAC/I,OAAI;AAAA,eAAKA,MAAKJ,QAAQF,cAAcE;OAAI;AACnF,UAAMoJ,cAAc1I,QAAQ,KAAKoI,aAAa5G,SAAS,IAAI,KAAK4G,aAAazG,MAAM3B,QAAQ,CAAC,EAAEqI,KAAK,SAACM,OAAK;AAAA,eAAKH,OAAKV,YAAYa,KAAK;MAAC,CAAA,IAAI9I;AAEzI,aAAO6I,eAAetJ;;IAE1BqH,cAAY,SAAAA,aAACrH,eAAe;AAAA,UAAAwJ,SAAA;AACxB,UAAM5I,QAAQ,KAAKoI,aAAaK,UAAU,SAAC/I,OAAI;AAAA,eAAKA,MAAKJ,QAAQF,cAAcE;OAAI;AACnF,UAAMoJ,cAAc1I,QAAQ,IAAIL,YAAY4I,SAAS,KAAKH,aAAazG,MAAM,GAAG3B,KAAK,GAAG,SAAC2I,OAAK;AAAA,eAAKC,OAAKd,YAAYa,KAAK;MAAC,CAAA,IAAI9I;AAE9H,aAAO6I,eAAetJ;;IAE1BgH,aAAWA,SAAAA,YAACrF,OAAO8H,OAAM;AAAA,UAAAC,SAAA;AACrB,WAAKrE,eAAe,KAAKA,eAAe,MAAMoE;AAE9C,UAAIH,cAAc;AAClB,UAAI/B,UAAU;AAEd,UAAIhH,YAAYkB,WAAW,KAAK8D,WAAW,GAAG;AAC1C,YAAMoE,mBAAmB,KAAKX,aAAaK,UAAU,SAACrJ,eAAa;AAAA,iBAAKA,cAAcE,QAAQwJ,OAAKnE,YAAYrF;SAAI;AAEnHoJ,sBAAc,KAAKN,aAAazG,MAAMoH,gBAAgB,EAAEV,KAAK,SAACjJ,eAAa;AAAA,iBAAK0J,OAAKlB,cAAcxI,aAAa;SAAE;AAClHsJ,sBAAc/I,YAAYqJ,QAAQN,WAAW,IAAI,KAAKN,aAAazG,MAAM,GAAGoH,gBAAgB,EAAEV,KAAK,SAACjJ,eAAa;AAAA,iBAAK0J,OAAKlB,cAAcxI,aAAa;QAAC,CAAA,IAAIsJ;MAC/J,OAAO;AACHA,sBAAc,KAAKN,aAAaC,KAAK,SAACjJ,eAAa;AAAA,iBAAK0J,OAAKlB,cAAcxI,aAAa;SAAE;MAC9F;AAEA,UAAIO,YAAYkB,WAAW6H,WAAW,GAAG;AACrC/B,kBAAU;MACd;AAEA,UAAIhH,YAAYqJ,QAAQN,WAAW,KAAK/I,YAAYqJ,QAAQ,KAAKrE,WAAW,GAAG;AAC3E+D,sBAAc,KAAKtD,cAAa;MACpC;AAEA,UAAIzF,YAAYkB,WAAW6H,WAAW,GAAG;AACrC,aAAKpC,kBAAkB;UACnBtF,eAAeD;UACf3B,eAAesJ;UACf1B,kBAAkB;QACtB,CAAC;MACL;AAEA,UAAI,KAAKxC,eAAe;AACpByE,qBAAa,KAAKzE,aAAa;MACnC;AAEA,WAAKA,gBAAgB0E,WAAW,WAAM;AAClCJ,eAAKrE,cAAc;AACnBqE,eAAKtE,gBAAgB;SACtB,GAAG;AAEN,aAAOmC;;IAEXL,mBAAiB,SAAAA,kBAACvF,OAAO;AACrB,UAAQC,gBAAkFD,MAAlFC,eAAe5B,gBAAmE2B,MAAnE3B,eAAemH,cAAoDxF,MAApDwF,aAAaG,YAAuC3F,MAAvC2F,WAASyC,wBAA8BpI,MAA5BiG,kBAAAA,mBAAAA,0BAAmB,SAAA,OAAA;AAEjF,UAAIrH,YAAYkB,WAAW,KAAK8D,WAAW,KAAK,KAAKA,YAAYrF,QAAQF,cAAcE,KAAK;AACxF,aAAKqF,cAAcvF;AACnB,aAAKgK,aAAY;iBACVpC,kBAAkB;AACzB,aAAK/F,MAAM,gBAAgB;UAAED;UAAeuF;UAAaG;QAAU,CAAC;MACxE;;IAEJ0C,cAAY,SAAAA,eAAG;AACX,UAAMnC,UAAUC,WAAWC,WAAW,KAAKC,KAAG/H,UAAAA,OAAA,GAAAA,OAAe,KAAKR,aAAa,GAAA,IAAA,CAAM;AAErF,UAAIoI,SAAS;AACTA,gBAAQoC,kBAAkBpC,QAAQoC,eAAe;UAAEC,OAAO;UAAWC,QAAQ;QAAQ,CAAC;MAC1F;;IAEJzE,0BAAwB,SAAAA,yBAAChH,eAAc;AAAA,UAAA0L,SAAA;AACnC,WAAKvK,iBAAiBlB,OAAO0L,QAAQ3L,iBAAgB,CAAA,CAAE,EAAE4L,OAAO,SAACC,KAAGC,MAAiB;AAAA,YAAAC,QAAAC,eAAAF,MAAA,CAAA,GAAdtK,MAAGuK,MAAA,CAAA,GAAEE,MAAGF,MAAA,CAAA;AAC3E,YAAIE,KAAK;AACL,cAAM3K,gBAAgBoK,OAAKQ,2BAA2B1K,GAAG;AAEzDF,2BAAiBuK,IAAI5C,KAAK3H,aAAa;QAC3C;AAEA,eAAOuK;SACR,CAAA,CAAE;;IAETK,4BAA0BA,SAAAA,2BAAC1K,KAAK2K,iBAA2B;AAAA,UAAXlL,QAAImL,UAAA1I,SAAA,KAAA0I,UAAA,CAAA,MAAArK,SAAAqK,UAAA,CAAA,IAAI;AACpDD,MAAAA,kBAAiBA,mBAAmBlL,UAAU,KAAK,KAAKkL;AAExD,UAAI,CAACA;AAAgB,eAAO;AAE5B,eAASE,IAAI,GAAGA,IAAIF,gBAAezI,QAAQ2I,KAAK;AAC5C,YAAM/K,gBAAgB6K,gBAAeE,CAAC;AAEtC,YAAI,KAAK3K,YAAYJ,eAAe,KAAK,MAAME;AAAK,iBAAOF;AAE3D,YAAMsJ,cAAc,KAAKsB,2BAA2B1K,KAAKF,cAAcN,OAAOC,QAAQ,CAAC;AAEvF,YAAI2J;AAAa,iBAAOA;MAC5B;;IAEJ0B,sBAAoB,SAAAA,qBAACtL,OAA+C;AAAA,UAAAuL,SAAA;AAAA,UAAxCtL,QAAImL,UAAA1I,SAAA,KAAA0I,UAAA,CAAA,MAAArK,SAAAqK,UAAA,CAAA,IAAI;AAAC,UAAErD,SAAOqD,UAAA1I,SAAA,KAAA0I,UAAA,CAAA,MAAArK,SAAAqK,UAAA,CAAA,IAAE,CAAA;AAAE,UAAElF,YAAUkF,UAAA1I,SAAA,KAAA0I,UAAA,CAAA,MAAArK,SAAAqK,UAAA,CAAA,IAAE;AAC5D,UAAMD,kBAAiB,CAAA;AAEvBnL,eACIA,MAAMwL,QAAQ,SAAC5K,OAAMM,OAAU;AAC3B,YAAMV,OAAO0F,cAAc,KAAKA,YAAY,MAAM,MAAMhF;AACxD,YAAMuK,UAAU;UACZ7K,MAAAA;UACAM;UACAjB;UACAO;UACAuH;UACA7B;;AAGJuF,gBAAQ,OAAO,IAAIF,OAAKD,qBAAqB1K,MAAKZ,OAAOC,QAAQ,GAAGwL,SAASjL,GAAG;AAChF2K,QAAAA,gBAAelD,KAAKwD,OAAO;MAC/B,CAAC;AAEL,aAAON;;IAEXO,WAAS,SAAAA,UAACP,iBAA4C;AAAA,UAAAQ,UAAA;AAAA,UAA5BC,wBAAsBR,UAAA1I,SAAA,KAAA0I,UAAA,CAAA,MAAArK,SAAAqK,UAAA,CAAA,IAAE,CAAA;AAC9CD,MAAAA,mBACIA,gBAAeK,QAAQ,SAAClL,eAAkB;AACtC,YAAIqL,QAAKvC,cAAc9I,aAAa,GAAG;AACnCsL,gCAAsB3D,KAAK3H,aAAa;AACxCqL,kBAAKD,UAAUpL,cAAcN,OAAO4L,qBAAqB;QAC7D;MACJ,CAAC;AAEL,aAAOA;IACX;;EAEJC,UAAU;IACNV,gBAAc,SAAAA,iBAAG;AACb,aAAO,KAAKG,qBAAqB,KAAKtL,SAAS,CAAA,CAAE;;IAErDsJ,cAAY,SAAAA,eAAG;AACX,aAAO,KAAKoC,UAAU,KAAKP,cAAc;;IAE7CpL,eAAa,SAAAA,gBAAG;AACZ,aAAOc,YAAYkB,WAAW,KAAK8D,WAAW,IAAA,GAAAtF,OAAO,KAAKV,SAAOU,GAAAA,EAAAA,OAAI,KAAKsF,YAAYrF,GAAG,IAAK;IAClG;;EAEJ6C,YAAY;IACRyI,cAAcA;EAClB;AACJ;;;AC5YI,SAAAhI,UAAA,GAAAc,YAmBCQ,yBAnBDlB,WAmBC;IAlBIC,IAAIN,OAAMhE,UAAA;IACV,SAAO+D,KAAEX,GAAA,UAAA;IACVmB,MAAK;IACJhF,UAAU;IACV,yBAAuB2M,MAAAxK,UAAU0C,SAAAlE,gBAAgBgB;IACjDlB,SAASgE,OAAOhE;IAChBE,eAAegM,MAAAxK,UAAU0C,SAAAlE,gBAAgBgB;IACzCf,OAAOiE,SAAckH;IACrBjL,WAAW2D,OAAS3D;IACpBC,gBAAgB4L,MAAc5L;IAC9BgG,SAAOlC,SAAOkC;IACdK,QAAMvC,SAAMuC;IACZwF,WAAS/H,SAASwC;IAClBpE,cAAa4B,SAAY5B;IACzBgD,iBAAgBpB,SAAe3B;IAC/BiD,IAAI3B,KAAE2B;IACNC,UAAU5B,KAAQ4B;KACX5B,KAAGzC,IAAA,UAAA,CAAA,GAAA,MAAA,IAAA,CAAA,MAAA,SAAA,yBAAA,WAAA,iBAAA,SAAA,aAAA,kBAAA,WAAA,UAAA,aAAA,gBAAA,mBAAA,MAAA,UAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC2CnB,IAAA8K,UAAe;EACXvN,MAAM;EACN,WAASwN;EACTC,cAAc;EACdvM,OAAO,CAAC,uBAAuB,cAAc,aAAa;EAC1DgG,MAAI,SAAAA,QAAG;AACH,WAAO;MACHzB,IAAI,KAAKiI,OAAOjI;MAChBkI,YAAY;MACZC,aAAa,CAAA;;;EAGrBxG,OAAO;IACH,aAAa,SAAAyG,SAAUxG,UAAU;AAC7B,WAAK5B,KAAK4B,YAAYyG,kBAAiB;IAC3C;;EAEJvG,SAAO,SAAAA,WAAG;AACN,SAAK9B,KAAK,KAAKA,MAAMqI,kBAAiB;;EAE1CpM,SAAS;IACLM,aAAWA,SAAAA,aAACE,OAAMlC,MAAM;AACpB,aAAOkC,QAAOC,YAAYC,aAAaF,MAAKlC,IAAI,CAAC,IAAIqC;;IAEzDC,cAAY,SAAAA,cAACJ,OAAM;AACf,aAAO,KAAKF,YAAYE,OAAM,OAAO;;IAEzCK,cAAY,SAAAA,cAACT,KAAKI,OAAMM,OAAO;AAC3B,aAAO,KAAKC,IAAIX,KAAK;QACjBY,SAAS;UACLF;UACAG,QAAQ,KAAKC,aAAaV,KAAI;UAC9BW,SAAS,KAAKC,cAAcZ,KAAI;UAChCa,UAAU,KAAKC,eAAed,KAAI;QACtC;MACJ,CAAC;;IAELU,cAAY,SAAAA,cAACV,OAAM;AACf,aAAO,KAAK5B,eAAe,KAAKA,aAAa,KAAK0B,YAAYE,OAAM,KAAK,CAAC,IAAI,KAAK1B,WAAW,KAAKoN,YAAY3K,KAAK,SAAC8K,SAAO;AAAA,eAAK5L,YAAY6L,OAAO9L,OAAM6L,OAAO;WAAK5L,YAAY6L,OAAO9L,OAAM,KAAKyL,UAAU;;IAElNxK,eAAa,SAAAA,eAACjB,OAAM;AAChB,aAAO,KAAKF,YAAYE,OAAM,SAAS,MAAM;;IAEjDc,gBAAc,SAAAA,gBAACd,OAAM;AACjB,aAAO,KAAKF,YAAYE,OAAM,UAAU;;IAE5CY,eAAa,SAAAA,eAACZ,OAAM;AAChB,aAAOC,YAAY6L,OAAO9L,OAAM,KAAKyL,UAAU;;IAEnDM,YAAU,SAAAA,WAACzL,OAAO;AACd,aAAAX,GAAAA,OAAU,KAAK4D,IAAE5D,GAAAA,EAAAA,OAAIW,KAAK;;IAE9B0L,aAAW,SAAAA,YAAC1L,OAAO;AACf,aAAO,KAAKyL,WAAWzL,KAAK;;IAEhC2L,aAAW,SAAAA,YAAC3L,OAAO;AACf,aAAA,GAAAX,OAAU,KAAKoM,WAAWzL,KAAK,GAAC,SAAA;;IAEpC4L,cAAY,SAAAA,aAAC5L,OAAO;AAChB,aAAA,GAAAX,OAAU,KAAKoM,WAAWzL,KAAK,GAAC,UAAA;;IAEpC6L,eAAaA,SAAAA,cAAC9K,OAAOrB,OAAM;AACvB,UAAI,KAAKc,eAAed,KAAI,GAAG;AAC3BqB,cAAMyF,eAAc;AAEpB;MACJ;AAEA,UAAI9G,MAAKoM,SAAS;AACdpM,QAAAA,MAAKoM,QAAQ;UAAE9K,eAAeD;UAAOrB,MAAAA;QAAK,CAAC;MAC/C;AAEA,WAAKqM,iBAAiBhL,OAAOrB,KAAI;AACjCwH,iBAAWK,MAAMxG,MAAM0G,aAAa;;IAExCuE,iBAAeA,SAAAA,gBAACjL,OAAOrB,OAAM;AACzB,cAAQqB,MAAM2E,MAAI;QACd,KAAK;AACD,eAAKuG,qBAAqBlL,KAAK;AAC/B;QAEJ,KAAK;AACD,eAAKmL,mBAAmBnL,KAAK;AAC7B;QAEJ,KAAK;AACD,eAAKoL,gBAAgBpL,KAAK;AAC1B;QAEJ,KAAK;AACD,eAAKqL,eAAerL,KAAK;AACzB;QAEJ,KAAK;QACL,KAAK;QACL,KAAK;AACD,eAAKsL,iBAAiBtL,OAAOrB,KAAI;AACjC;MAIR;;IAEJuM,sBAAoB,SAAAA,qBAAClL,OAAO;AACxB,UAAMuL,WAAWpF,WAAWqF,aAAaxL,MAAM0G,eAAe,eAAe,MAAM,OAAOP,WAAWC,WAAWpG,MAAM0G,cAAc+E,oBAAoB,8BAA8B,IAAI;AAE1LF,iBAAWpF,WAAWK,MAAM+E,QAAQ,IAAI,KAAKG,oBAAoB;QAAEzL,eAAeD;QAAOwF,aAAa;MAAK,CAAC;AAC5GxF,YAAMyF,eAAc;;IAExB0F,oBAAkB,SAAAA,mBAACnL,OAAO;AACtB,UAAM2L,aAAa,KAAKC,eAAe5L,MAAM0G,cAAcmF,aAAa,KAAK,KAAKC,eAAc;AAChG,UAAMP,WAAWpF,WAAWqF,aAAaG,YAAY,eAAe,MAAM,OAAOxF,WAAWC,WAAWuF,WAAWF,oBAAoB,8BAA8B,IAAI;AAExKF,iBAAWpF,WAAWK,MAAM+E,QAAQ,IAAI,KAAKG,oBAAoB;QAAEzL,eAAeD;QAAOwF,aAAa;MAAM,CAAC;AAC7GxF,YAAMyF,eAAc;;IAExB2F,iBAAe,SAAAA,gBAACpL,OAAO;AACnB,WAAK+L,oBAAoB/L,OAAO,KAAKgM,gBAAe,CAAE;AACtDhM,YAAMyF,eAAc;;IAExB4F,gBAAc,SAAAA,eAACrL,OAAO;AAClB,WAAK+L,oBAAoB/L,OAAO,KAAK8L,eAAc,CAAE;AACrD9L,YAAMyF,eAAc;;IAExB6F,kBAAgBA,SAAAA,iBAACtL,OAAOrB,OAAM;AAC1B,UAAMsN,eAAe9F,WAAWC,WAAWpG,MAAM0G,eAAe,gCAAgC;AAEhGuF,qBAAeA,aAAa1F,MAAK,IAAK,KAAKuE,cAAc9K,OAAOrB,KAAI;AACpEqB,YAAMyF,eAAc;;IAExByG,gBAAc,SAAAA,eAACC,cAAiC;AAAA,UAAnBxG,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,CAAAA,MAAAA,SAAAA,UAAAA,CAAAA,IAAY;AACrC,UAAMyG,mBAAmBzG,YAAYwG,eAAeA,aAAaV;AACjE,UAAMY,gBAAgBlG,WAAWC,WAAWgG,kBAAkB,4BAA4B;AAE1F,aAAOC,gBAAiBlG,WAAWqF,aAAaa,eAAe,iBAAiB,IAAI,KAAKH,eAAeG,cAAcR,aAAa,IAAIQ,gBAAiB;;IAE5JT,gBAAc,SAAAA,eAACO,cAAiC;AAAA,UAAnBxG,YAAAA,UAAAA,SAAAA,KAAAA,UAAAA,CAAAA,MAAAA,SAAAA,UAAAA,CAAAA,IAAY;AACrC,UAAM2G,mBAAmB3G,YAAYwG,eAAeA,aAAaI;AACjE,UAAMF,gBAAgBlG,WAAWC,WAAWkG,kBAAkB,4BAA4B;AAE1F,aAAOD,gBAAiBlG,WAAWqF,aAAaa,eAAe,iBAAiB,IAAI,KAAKT,eAAeS,cAAcR,aAAa,IAAIQ,gBAAiB;;IAE5JL,iBAAe,SAAAA,kBAAG;AACd,aAAO,KAAKE,eAAe,KAAK7F,IAAImG,mBAAmB,IAAI;;IAE/DV,gBAAc,SAAAA,iBAAG;AACb,aAAO,KAAKF,eAAe,KAAKvF,IAAIoG,kBAAkB,IAAI;;IAE9Df,qBAAmB,SAAAA,oBAAC1L,OAAO;AACvB,UAAQC,gBAA0CD,MAA1CC,eAAeuF,cAA2BxF,MAA3BwF,aAAaG,YAAc3F,MAAd2F;AACpC,UAAMwG,eAAelM,cAAcyG,cAAcC,QAAQ,2BAA2B;AACpF,UAAM+F,UAAS/G,YAAYQ,WAAWC,WAAW+F,cAAc,4BAA4B,IAAI3G,cAAc,KAAK0G,eAAeC,YAAY,IAAI,KAAKP,eAAeO,YAAY;AAEjLO,MAAAA,UAAS,KAAKX,oBAAoB9L,eAAeyM,OAAM,IAAIlH,cAAc,KAAK4F,gBAAgBnL,aAAa,IAAI,KAAKoL,eAAepL,aAAa;;IAEpJ+K,kBAAgBA,SAAAA,iBAAChL,OAAOrB,OAA0B;AAAA,UAApBgO,aAAAA,UAAAA,SAAAA,KAAAA,UAAAA,CAAAA,MAAAA,SAAAA,UAAAA,CAAAA,IAAa;AACvC,UAAI,CAAC,KAAKlN,eAAed,KAAI,GAAG;AAC5B,YAAMS,SAAS,KAAKC,aAAaV,KAAI;AACrC,YAAMiO,YAAY,CAACxN,SAAS,eAAe;AAE3C,aAAKgL,aAAauC,aAAahO,QAAO,KAAKyL,cAAcxL,YAAY6L,OAAO9L,OAAM,KAAKyL,UAAU,IAAI,OAAOzL;AAE5G,YAAI,KAAK1B,UAAU;AAEf,cAAI,KAAKoN,YAAY3K,KAAK,SAAC8K,SAAO;AAAA,mBAAK5L,YAAY6L,OAAO9L,OAAM6L,OAAO;UAAC,CAAA,GAAG;AACvE,iBAAKH,cAAc,KAAKA,YAAY7J,OAAO,SAACgK,SAAO;AAAA,qBAAK,CAAC5L,YAAY6L,OAAO9L,OAAM6L,OAAO;aAAE;UAC/F,OAAO;AACH,iBAAKH,YAAYrE,KAAKrH,KAAI;UAC9B;QACJ;AAEA,aAAKkO,mBAAmB;UAAElO,MAAAA;UAAMwB,UAAU,CAACf;QAAO,CAAC;AACnD,aAAKc,MAAM0M,WAAW;UAAE3M,eAAeD;UAAOrB,MAAAA;QAAK,CAAC;MACxD;;IAEJkO,oBAAkB,SAAAA,mBAAAhE,MAA6B;AAAA,UAA1BlK,QAAIkK,KAAJlK,MAAImO,gBAAAjE,KAAE1I,UAAAA,WAAO2M,kBAAI,SAAA,QAAIA;AACtC,UAAI,KAAK/P,cAAc;AACnB,YAAIgQ,QAAMC,cAAA,CAAA,GAAO,KAAKjQ,YAAAA;AAEtB,YAAIoD;AAAU4M,gBAAMpO,MAAKJ,GAAG,IAAI;;AAC3B,iBAAOwO,MAAMpO,MAAKJ,GAAG;AAE1B,aAAK2B,MAAM,uBAAuB6M,KAAK;MAC3C;;IAEJhB,qBAAmBA,SAAAA,oBAAC/L,OAAOkG,SAAS;AAChCA,iBAAWC,WAAWK,MAAMN,OAAO;;IAEvCrF,kBAAgBA,SAAAA,kBAAClC,OAAMM,OAAO;AAC1B,aAAO;QACHgC,MAAMF,WACF;UACI,SAAO,CAAC,KAAKC,GAAG,YAAY,GAAG,KAAKvC,YAAYE,OAAM,MAAM,CAAC;WAEjE,KAAKK,aAAa,cAAcL,OAAMM,KAAK,CAC/C;QACAiC,OAAOH,WACH;UACI,SAAO,KAAKC,GAAG,aAAa;WAEhC,KAAKhC,aAAa,eAAeL,OAAMM,KAAK,CAChD;;IAER;;EAEJmC,YAAY;IACR6L,eAAeA;IACf5L,kBAAkBA;IAClBC,iBAAiBA;EACrB;AACJ;;;;;;;AC/QI,SAAAO,UAAA,GAAAH,mBAkDK,OAlDLO,WAkDK;IAlDCC,IAAI4H,MAAE5H;IAAG,SAAOP,KAAEX,GAAA,MAAA;KAAkBW,KAAIuL,KAAA,MAAA,CAAA,GAAA,EAC1CrL,UAAA,IAAA,GAAAH,mBAgDUI,UAhDwB,MAAAC,WAAAJ,KAAA/E,OAAhB,SAAA+B,OAAMM,OAAK;;MAAkBV,KAAAyD,SAAA2I,YAAY1L,KAAK;QACjD+C,SAAApC,cAAcjB,KAAI,KAA7BkD,UAAA,GAAAH,mBA8CK,OA9CLO,WA8CK;;MA9C4B5E,OAAO2E,SAAWvD,YAACE,OAAI,OAAA;MAAa,SAAQ,CAAAgD,KAAAX,GAAa,OAAA,GAAAgB,SAAAvD,YAAYE,OAAI,OAAA,CAAA;;OAAqBgD,KAAGzC,IAAA,OAAA,CAAA,GAAA,CAC9HkD,gBA4BK,OA5BLH,WA4BK;MA3BAC,IAAIF,SAAW4I,YAAC3L,KAAK;MACrB,SAAA,CAAQ0C,KAAEX,GAAA,UAAA;QAAarC,MAAAA;OAAS,GAAAqD,SAAAvD,YAAYE,OAAI,aAAA,CAAA;MAChDxB,UAAU6E,SAAAvC,eAAed,KAAI,IAAA,KAASgD,KAAQxE;MAC/CgF,MAAK;MACJ,cAAYH,SAAYjD,aAACJ,KAAI;MAC7B,iBAAeqD,SAAY3C,aAACV,KAAI;MAChC,iBAAeqD,SAAY6I,aAAC5L,KAAK;MACjC,iBAAe+C,SAAcvC,eAACd,KAAI;MAClC0D,SAAO,SAAAA,QAAAC,QAAA;AAAA,eAAAN,SAAA8I,cAAcxI,QAAQ3D,KAAI;;MACjCoL,WAAS,SAAAA,UAAAzH,QAAA;AAAA,eAAAN,SAAAiJ,gBAAgB3I,QAAQ3D,KAAI;;;OAC9BqD,SAAYhD,aAAA,UAAWL,OAAMM,KAAK,GAAA;MACzC,iBAAe+C,SAAY3C,aAACV,KAAI;MAChC,mBAAiBqD,SAAcvC,eAACd,KAAI;SAErCyD,gBAYK,OAZLH,WAYK;MAZC,SAAON,KAAEX,GAAA,eAAA;;OAA2BgB,SAAYhD,aAAA,iBAAkBL,OAAMM,KAAK,CAAA,GAAA,CAC9D,CAAA0C,KAAAwL,OAAOxO,QACpBkD,UAAA,GAAAH,mBAOG,KAPHO,WAOG;;MAPCQ,MAAMT,SAAWvD,YAACE,OAAI,KAAA;MAAW,SAAOgD,KAAEX,GAAA,YAAA;MAAiB7D,UAAU;;OAAY6E,SAAYhD,aAAA,cAAeL,OAAMM,KAAK,CAAA,GAAA,CAC3G+C,SAAAvD,YAAYE,OAAI,OAAA,IAA5ByO,WAEMzL,KAAAwL,QAAA,eAAA;;MAFsD/N,QAAQ4C,SAAY3C,aAACV,KAAI;OAArF,WAAA;AAAA,aAEM,EADFkD,UAAA,GAAAc,YAA2JC,wBAA3IZ,SAAA3C,aAAaV,KAAI,IAAA,oBAAA,kBAAA,GAAjCsD,WAA2J;QAA7E,SAAON,KAAEX,GAAA,aAAA;;SAAyBgB,SAAYhD,aAAA,eAAgBL,OAAMM,KAAK,CAAA,GAAA,MAAA,IAAA,CAAA,OAAA,CAAA,EAAA;uCAE1I0C,KAAAwL,OAAOE,cAAU,UAAA,GAAlC1K,YAAiIC,wBAAxFjB,KAAMwL,OAACE,UAAU,GAAA;;MAAG1O,MAAMA;MAAO,SAAQ2O,eAAA,CAAA3L,KAAAX,GAAkB,YAAA,GAAAgB,SAAAvD,YAAYE,OAAI,MAAA,CAAA,CAAA;sCACnGqD,SAAAvD,YAAYE,OAAI,MAAA,KAAjCkD,UAAA,GAAAH,mBAAqJ,QAArJO,WAAqJ;;MAAxG,SAAQ,CAAAN,KAAAX,GAAkB,YAAA,GAAAgB,SAAAvD,YAAYE,OAAI,MAAA,CAAA;;OAAoBqD,SAAYhD,aAAA,cAAeL,OAAMM,KAAK,CAAA,GAAA,MAAA,EAAA,KAAA,mBAAA,IAAA,IAAA,GACjJmD,gBAAiH,QAAjHH,WAAiH;MAA1G,SAAON,KAAEX,GAAA,aAAA;;OAAyBgB,SAAAhD,aAAY,eAAgBL,OAAMM,KAAK,CAAM,GAAA6D,gBAAAd,SAAAjD,aAAaJ,KAAI,CAAA,GAAA,EAAA,CAAA,GAAA,IAAA,UAAA,MAAA,UAAA,GAG/GgE,YAAkNC,wBAA3LjB,KAAMwL,OAACxO,IAAI,GAAA;;MAAGA,MAAMA;MAAOoE,MAAM;MAAO3D,QAAQ4C,SAAY3C,aAACV,KAAI;MAAIqE,YAAYhB,SAAWvD,YAACE,OAAI,OAAA;MAAauC,OAAOc,SAAYjD,aAACJ,KAAI;MAAIhC,OAAOqF,SAAAnB,iBAAiBlC,OAAMM,KAAK;8FAG5MgE,YAeYC,YAfZjB,WAeY;MAfAxF,MAAK;;OAA+BkF,KAAGzC,IAAA,YAAA,CAAA,GAAA;yBAC/C,WAAA;AAAA,eAaK,CAbLsD,eAAAJ,gBAaK,OAbLH,WAaK;UAb6BC,IAAIF,SAAY6I,aAAC5L,KAAK;UAAI,SAAO0C,KAAEX,GAAA,kBAAA;UAAsBmB,MAAK;UAAU,mBAAiBH,SAAW4I,YAAC3L,KAAK;;WAAW0C,KAAGzC,IAAA,kBAAA,CAAA,GAAA,CAC3I8C,SAAAvD,YAAYE,OAAI,OAAA,KAA3BkD,UAAA,GAAAH,mBAWK,OAXLO,WAWK;;UAXmC,SAAON,KAAEX,GAAA,SAAA;;WAAqBW,KAAGzC,IAAA,SAAA,CAAA,GAAA,CACrE+D,YASCsK,0BAAA;UARI3P,SAASoE,SAAU0I,WAACzL,KAAK;UACzBlB,OAAOiE,SAAWvD,YAACE,OAAI,OAAA;UACvBV,WAAW0D,KAAMwL;UACjBpQ,cAAc4E,KAAY5E;UAC1BqD,cAAa4B,SAAkB6K;UAC/BW,eAAcxL,SAAmB0J;UACjCpI,IAAI3B,KAAE2B;UACNC,UAAU5B,KAAQ4B;oLAVlB,CAAAC,OAAAxB,SAAA3C,aAAaV,KAAI,CAAA,CAAA,CAAA,CAAA;;;;;;;",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "panel", "header", "_ref2", "instance", "item", "isItemActive", "items", "isItemDisabled", "headerContent", "headerLink", "headerIcon", "headerLabel", "contentContainer", "content", "rootList", "_ref3", "processedItem", "isItemFocused", "itemContent", "itemLink", "itemIcon", "itemLabel", "submenuIcon", "submenu", "separator", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "model", "type", "Array", "expandedKeys", "Object", "multiple", "Boolean", "tabindex", "Number", "style", "PanelMenuStyle", "provide", "$pcPanelMenu", "$parentInstance", "hostName", "emits", "panelId", "String", "focusedItemId", "items", "level", "templates", "activeItemPath", "methods", "getItemId", "processedItem", "concat", "key", "getItemKey", "getItemProp", "params", "item", "ObjectUtils", "getItemValue", "undefined", "getItemLabel", "getPTOptions", "index", "ptm", "context", "active", "isItemActive", "focused", "isItemFocused", "disabled", "isItemDisabled", "some", "path", "isItemVisible", "isItemGroup", "isNotEmpty", "onItemClick", "event", "originalEvent", "$emit", "expanded", "onItemToggle", "onItemMouseMove", "getAriaSetSize", "_this", "filter", "length", "getAriaPosInset", "_this2", "slice", "getMenuItemProps", "action", "mergeProps", "cx", "icon", "label", "submenuicon", "components", "ChevronRightIcon", "ChevronDownIcon", "directives", "ripple", "Ripple", "_createElementBlock", "_ctx", "$props", "_openBlock", "_Fragment", "_renderList", "$options", "_mergeProps", "id", "role", "_createElementVNode", "onClick", "$event", "onMousemove", "_withDirectives", "href", "target", "_createBlock", "_resolveDynamicComponent", "itemicon", "_toDisplayString", "root", "hasSubmenu", "_createVNode", "_Transition", "_component_PanelMenuSub", "onItemMousemove", "_cache", "pt", "unstyled", "_vShow", "searchTimeout", "searchValue", "data", "focusedItem", "watch", "newValue", "autoUpdateActiveItemPath", "mounted", "parentKey", "onFocus", "isElementInPanel", "relatedTarget", "findFirstItem", "findLastItem", "onBlur", "onKeyDown", "metaKey", "ctrlKey", "code", "onArrowDownKey", "onArrowUpKey", "onArrowLeftKey", "onArrowRightKey", "onHomeKey", "onEndKey", "onSpaceKey", "onEnterKey", "isPrintableCharacter", "searchItems", "findNextItem", "changeFocusedItem", "focusOnNext", "preventDefault", "findPrevItem", "selfCheck", "matched", "p", "parent", "grouped", "push", "allowHeaderFocus", "element", "DomHandler", "findSingle", "$el", "anchorElement", "click", "focus", "panel", "currentTarget", "closest", "contains", "isItemMatched", "_this$getItemLabel", "isValidItem", "toLocaleLowerCase", "searchLocale", "startsWith", "isVisibleItem", "_this3", "visibleItems", "find", "_this4", "findLast", "_this5", "findIndex", "matchedItem", "pItem", "_this6", "char", "_this7", "focusedItemIndex", "isEmpty", "clearTimeout", "setTimeout", "_event$allowHeaderFoc", "scrollInView", "scrollIntoView", "block", "inline", "_this8", "entries", "reduce", "acc", "_ref", "_ref2", "_slicedToArray", "val", "findProcessedItemByItemKey", "processedItems", "arguments", "i", "createProcessedItems", "_this9", "forEach", "newItem", "flatItems", "_this10", "processedFlattenItems", "computed", "PanelMenuSub", "$data", "onKeydown", "script", "BasePanelMenu", "inheritAttrs", "$attrs", "activeItem", "activeItems", "$attrsId", "UniqueComponentId", "subItem", "equals", "getPanelId", "getPanelKey", "getHeaderId", "getContentId", "onHeaderClick", "command", "changeActiveItem", "onHeaderKeyDown", "onHeaderArrowDownKey", "onHeaderArrowUpKey", "onHeaderHomeKey", "onHeaderEndKey", "onHeaderEnterKey", "rootList", "getAttribute", "nextElementSibling", "updateFocusedHeader", "prevHeader", "findPrevHeader", "parentElement", "findLastHeader", "changeFocusedHeader", "findFirstHeader", "headerAction", "findNextHeader", "panelElement", "nextPanelElement", "headerElement", "prevPanelElement", "previousElementSibling", "firstElementChild", "lastElementChild", "header", "selfActive", "eventName", "changeExpandedKeys", "_ref$expanded", "_keys", "_objectSpread", "PanelMenuList", "ptmi", "$slots", "_renderSlot", "headericon", "_normalizeClass", "_component_PanelMenuList", "onHeaderFocus"]
}
