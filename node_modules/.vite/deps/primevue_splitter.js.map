{
  "version": 3,
  "sources": ["../../src/splitter/style/SplitterStyle.js", "../../src/splitter/BaseSplitter.vue", "../../src/splitter/Splitter.vue", "../../src/splitter/Splitter.vue?vue&type=template&id=203f34f5&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-splitter {\n    display: flex;\n    flex-wrap: nowrap;\n    border: 1px solid ${dt('splitter.border.color')};\n    background: ${dt('splitter.background')};\n    border-radius: ${dt('border.radius.md')};\n    color: ${dt('splitter.color')};\n}\n\n.p-splitter-vertical {\n    flex-direction: column;\n}\n\n.p-splitter-gutter {\n    flex-grow: 0;\n    flex-shrink: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    z-index: 1;\n    background: ${dt('splitter.gutter.background')};\n}\n\n.p-splitter-gutter-handle {\n    border-radius: ${dt('splitter.handle.border.radius')};\n    background: ${dt('splitter.handle.background')};\n    transition: outline-color ${dt('splitter.transition.duration')}, box-shadow ${dt('splitter.transition.duration')};\n    outline-color: transparent;\n}\n\n.p-splitter-gutter-handle:focus-visible {\n    box-shadow: ${dt('splitter.handle.focus.ring.shadow')};\n    outline: ${dt('splitter.handle.focus.ring.width')} ${dt('splitter.handle.focus.ring.style')} ${dt('splitter.handle.focus.ring.color')};\n    outline-offset: ${dt('splitter.handle.focus.ring.offset')};\n}\n\n.p-splitter-horizontal.p-splitter-resizing {\n    cursor: col-resize;\n    user-select: none;\n}\n\n.p-splitter-vertical.p-splitter-resizing {\n    cursor: row-resize;\n    user-select: none;\n}\n\n.p-splitter-horizontal > .p-splitter-gutter > .p-splitter-gutter-handle {\n    height: ${dt('splitter.handle.size')};\n    width: 100%;\n}\n\n.p-splitter-vertical > .p-splitter-gutter > .p-splitter-gutter-handle {\n    width: ${dt('splitter.handle.size')};\n    height: 100%;\n}\n\n.p-splitter-horizontal > .p-splitter-gutter {\n    cursor: col-resize;\n}\n\n.p-splitter-vertical > .p-splitter-gutter {\n    cursor: row-resize;\n}\n\n.p-splitterpanel {\n    flex-grow: 1;\n    overflow: hidden;\n}\n\n.p-splitterpanel-nested {\n    display: flex;\n}\n\n.p-splitterpanel .p-splitter {\n    flex-grow: 1;\n    border: 0 none;\n}\n`;\n\nconst classes = {\n    root: ({ props }) => ['p-splitter p-component', 'p-splitter-' + props.layout],\n    gutter: 'p-splitter-gutter',\n    gutterHandle: 'p-splitter-gutter-handle'\n};\n\nconst inlineStyles = {\n    root: ({ props }) => [{ display: 'flex', 'flex-wrap': 'nowrap' }, props.layout === 'vertical' ? { 'flex-direction': 'column' } : '']\n};\n\nexport default BaseStyle.extend({\n    name: 'splitter',\n    theme,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport SplitterStyle from 'primevue/splitter/style';\n\nexport default {\n    name: 'BaseSplitter',\n    extends: BaseComponent,\n    props: {\n        layout: {\n            type: String,\n            default: 'horizontal'\n        },\n        gutterSize: {\n            type: Number,\n            default: 4\n        },\n        stateKey: {\n            type: String,\n            default: null\n        },\n        stateStorage: {\n            type: String,\n            default: 'session'\n        },\n        step: {\n            type: Number,\n            default: 5\n        }\n    },\n    style: SplitterStyle,\n    provide() {\n        return {\n            $pcSplitter: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    data() {\n        return {\n            prevSize: null\n        };\n    },\n    mounted() {\n        if (this.panels && this.panels.length) {\n            let initialized = false;\n\n            if (this.isStateful()) {\n                initialized = this.restoreState();\n            }\n\n            if (!initialized) {\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                let _panelSizes = [];\n\n                this.panels.map((panel, i) => {\n                    let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                    let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                    _panelSizes[i] = panelSize;\n                    children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                this.panelSizes = _panelSizes;\n                this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n            }\n        }\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? DomHandler.getWidth(this.$el) : DomHandler.getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) newPos = (event.pageX * 100) / this.size - (this.startPos * 100) / this.size;\n                else newPos = (event.pageY * 100) / this.size - (this.startPos * 100) / this.size;\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (ObjectUtils.isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" :data-p-resizing=\"false\" v-bind=\"ptmi('root', getPTOptions)\">\n        <template v-for=\"(panel, i) of panels\" :key=\"i\">\n            <component :is=\"panel\" tabindex=\"-1\"></component>\n            <div\n                v-if=\"i !== panels.length - 1\"\n                ref=\"gutter\"\n                :class=\"cx('gutter')\"\n                role=\"separator\"\n                tabindex=\"-1\"\n                @mousedown=\"onGutterMouseDown($event, i)\"\n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\"\n                :data-p-gutter-resizing=\"false\"\n                v-bind=\"ptm('gutter')\"\n            >\n                <div :class=\"cx('gutterHandle')\" tabindex=\"0\" :style=\"[gutterStyle]\" :aria-orientation=\"layout\" :aria-valuenow=\"prevSize\" @keyup=\"onGutterKeyUp\" @keydown=\"onGutterKeyDown($event, i)\" v-bind=\"ptm('gutterHandle')\"></div>\n            </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { DomHandler, ObjectUtils } from '@primevue/core/utils';\nimport BaseSplitter from './BaseSplitter.vue';\n\nexport default {\n    name: 'Splitter',\n    extends: BaseSplitter,\n    inheritAttrs: false,\n    emits: ['resizestart', 'resizeend', 'resize'],\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    touchMoveListener: null,\n    touchEndListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null,\n    timer: null,\n    data() {\n        return {\n            prevSize: null\n        };\n    },\n    mounted() {\n        if (this.panels && this.panels.length) {\n            let initialized = false;\n\n            if (this.isStateful()) {\n                initialized = this.restoreState();\n            }\n\n            if (!initialized) {\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n                let _panelSizes = [];\n\n                this.panels.map((panel, i) => {\n                    let panelInitialSize = panel.props && panel.props.size ? panel.props.size : null;\n                    let panelSize = panelInitialSize || 100 / this.panels.length;\n\n                    _panelSizes[i] = panelSize;\n                    children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                this.panelSizes = _panelSizes;\n                this.prevSize = parseFloat(_panelSizes[0]).toFixed(4);\n            }\n        }\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'SplitterPanel';\n        },\n        onResizeStart(event, index, isKeyDown) {\n            this.gutterElement = event.currentTarget || event.target.parentElement;\n            this.size = this.horizontal ? DomHandler.getWidth(this.$el) : DomHandler.getHeight(this.$el);\n\n            if (!isKeyDown) {\n                this.dragging = true;\n                this.startPos = this.layout === 'horizontal' ? event.pageX || event.changedTouches[0].pageX : event.pageY || event.changedTouches[0].pageY;\n            }\n\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n\n            if (isKeyDown) {\n                this.prevPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true);\n                this.nextPanelSize = this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true);\n            } else {\n                this.prevPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true) : DomHandler.getOuterHeight(this.prevPanelElement, true))) / this.size;\n                this.nextPanelSize = (100 * (this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true) : DomHandler.getOuterHeight(this.nextPanelElement, true))) / this.size;\n            }\n\n            this.prevPanelIndex = index;\n            this.$emit('resizestart', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter[index].setAttribute('data-p-gutter-resizing', true);\n            this.$el.setAttribute('data-p-resizing', true);\n        },\n        onResize(event, step, isKeyDown) {\n            let newPos, newPrevPanelSize, newNextPanelSize;\n\n            if (isKeyDown) {\n                if (this.horizontal) {\n                    newPrevPanelSize = (100 * (this.prevPanelSize + step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize - step)) / this.size;\n                } else {\n                    newPrevPanelSize = (100 * (this.prevPanelSize - step)) / this.size;\n                    newNextPanelSize = (100 * (this.nextPanelSize + step)) / this.size;\n                }\n            } else {\n                if (this.horizontal) newPos = (event.pageX * 100) / this.size - (this.startPos * 100) / this.size;\n                else newPos = (event.pageY * 100) / this.size - (this.startPos * 100) / this.size;\n\n                newPrevPanelSize = this.prevPanelSize + newPos;\n                newNextPanelSize = this.nextPanelSize - newPos;\n            }\n\n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n                this.prevSize = parseFloat(newPrevPanelSize).toFixed(4);\n            }\n\n            this.$emit('resize', { originalEvent: event, sizes: this.panelSizes });\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', { originalEvent: event, sizes: this.panelSizes });\n            this.$refs.gutter.forEach((gutter) => gutter.setAttribute('data-p-gutter-resizing', false));\n            this.$el.setAttribute('data-p-resizing', false);\n            this.clear();\n        },\n        repeat(event, index, step) {\n            this.onResizeStart(event, index, true);\n            this.onResize(event, step, true);\n        },\n        setTimer(event, index, step) {\n            if (!this.timer) {\n                this.timer = setInterval(() => {\n                    this.repeat(event, index, step);\n                }, 40);\n            }\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n                this.timer = null;\n            }\n        },\n        onGutterKeyUp() {\n            this.clearTimer();\n            this.onResizeEnd();\n        },\n        onGutterKeyDown(event, index) {\n            switch (event.code) {\n                case 'ArrowLeft': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowRight': {\n                    if (this.layout === 'horizontal') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowDown': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step * -1);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                case 'ArrowUp': {\n                    if (this.layout === 'vertical') {\n                        this.setTimer(event, index, this.step);\n                    }\n\n                    event.preventDefault();\n                    break;\n                }\n\n                default:\n                    //no op\n                    break;\n            }\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            this.bindTouchListeners();\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            this.unbindTouchListeners();\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = (event) => this.onResize(event);\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = (event) => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                };\n\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        bindTouchListeners() {\n            if (!this.touchMoveListener) {\n                this.touchMoveListener = (event) => this.onResize(event.changedTouches[0]);\n                document.addEventListener('touchmove', this.touchMoveListener);\n            }\n\n            if (!this.touchEndListener) {\n                this.touchEndListener = (event) => {\n                    this.resizeEnd(event);\n                    this.unbindTouchListeners();\n                };\n\n                document.addEventListener('touchend', this.touchEndListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (newPrevPanelSize > 100 || newPrevPanelSize < 0) return false;\n            if (newNextPanelSize > 100 || newNextPanelSize < 0) return false;\n\n            let prevPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex], 'minSize');\n\n            if (this.panels[this.prevPanelIndex].props && prevPanelMinSize && prevPanelMinSize > newPrevPanelSize) {\n                return false;\n            }\n\n            let newPanelMinSize = ObjectUtils.getVNodeProp(this.panels[this.prevPanelIndex + 1], 'minSize');\n\n            if (this.panels[this.prevPanelIndex + 1].props && newPanelMinSize && newPanelMinSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        unbindTouchListeners() {\n            if (this.touchMoveListener) {\n                document.removeEventListener('touchmove', this.touchMoveListener);\n                this.touchMoveListener = null;\n            }\n\n            if (this.touchEndListener) {\n                document.removeEventListener('touchend', this.touchEndListener);\n                this.touchEndListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch (this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            if (ObjectUtils.isArray(this.panelSizes)) {\n                this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n            }\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter((child) => child.getAttribute('data-pc-name') === 'splitterpanel');\n\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + (this.panels.length - 1) * this.gutterSize + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        }\n    },\n    computed: {\n        panels() {\n            const panels = [];\n\n            this.$slots.default().forEach((child) => {\n                if (this.isSplitterPanel(child)) {\n                    panels.push(child);\n                } else if (child.children instanceof Array) {\n                    child.children.forEach((nestedChild) => {\n                        if (this.isSplitterPanel(nestedChild)) {\n                            panels.push(nestedChild);\n                        }\n                    });\n                }\n            });\n\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal) return { width: this.gutterSize + 'px' };\n            else return { height: this.gutterSize + 'px' };\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        },\n        getPTOptions() {\n            return {\n                context: {\n                    nested: this.$parentInstance?.nestedState\n                }\n            };\n        }\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "concat", "classes", "root", "_ref2", "props", "layout", "gutter", "gutterHandle", "inlineStyles", "_ref3", "display", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "layout", "type", "String", "gutterSize", "Number", "stateKey", "stateStorage", "step", "style", "SplitterStyle", "provide", "$pcSplitter", "$parentInstance", "script", "BaseSplitter", "inheritAttrs", "emits", "dragging", "mouseMoveListener", "mouseUpListener", "touchMoveListener", "touchEndListener", "size", "gutterElement", "startPos", "prevPanelElement", "nextPanelElement", "nextPanelSize", "prevPanelSize", "panelSizes", "prevPanelIndex", "timer", "data", "prevSize", "mounted", "_this", "panels", "length", "initialized", "isStateful", "restoreState", "children", "_toConsumableArray", "$el", "filter", "child", "getAttribute", "_panelSizes", "map", "panel", "i", "panelInitialSize", "panelSize", "flexBasis", "parseFloat", "toFixed", "beforeUnmount", "clear", "unbindMouseListeners", "methods", "isSplitterPanel", "onResizeStart", "event", "index", "isKeyDown", "currentTarget", "target", "parentElement", "horizontal", "DomHandler", "getWidth", "getHeight", "pageX", "changedTouches", "pageY", "previousElementSibling", "nextElementSibling", "getOuterWidth", "getOuterHeight", "$emit", "originalEvent", "sizes", "$refs", "gutter", "setAttribute", "onResize", "newPos", "newPrevPanelSize", "newNextPanelSize", "validateResize", "onResizeEnd", "saveState", "forEach", "repeat", "setTimer", "_this2", "setInterval", "clearTimer", "clearInterval", "onGutterKeyUp", "onGutterKeyDown", "code", "preventDefault", "onGutterMouseDown", "bindMouseListeners", "onGutterTouchStart", "bindTouchListeners", "onGutterTouchMove", "onGutterTouchEnd", "unbindTouchListeners", "_this3", "document", "addEventListener", "_this4", "resizeEnd", "prevPanelMinSize", "ObjectUtils", "getVNodeProp", "newPanelMinSize", "removeEventListener", "getStorage", "window", "localStorage", "sessionStorage", "Error", "isArray", "setItem", "JSON", "stringify", "_this5", "storage", "stateString", "getItem", "parse", "computed", "_this6", "$slots", "push", "Array", "nestedChild", "gutterStyle", "width", "height", "getPTOptions", "_this$$parentInstance", "context", "nested", "nestedState", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "sx", "ptmi", "$options", "_Fragment", "_renderList", "_createBlock", "_resolveDynamicComponent", "tabindex", "ref", "role", "onMousedown", "$event", "onTouchstart", "onTouchmove", "onTouchend", "ptm", "_createElementVNode", "$data", "onKeyup", "apply", "arguments", "onKeydown", "_hoisted_2"]
}
