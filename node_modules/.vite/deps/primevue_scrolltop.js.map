{
  "version": 3,
  "sources": ["../../src/scrolltop/style/ScrollTopStyle.js", "../../src/scrolltop/BaseScrollTop.vue", "../../src/scrolltop/ScrollTop.vue", "../../src/scrolltop/ScrollTop.vue?vue&type=template&id=70ab2a93&lang.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst theme = ({ dt }) => `\n.p-scrolltop.p-button {\n    position: fixed;\n    bottom: 20px;\n    right: 20px;\n}\n\n.p-scrolltop-sticky.p-button {\n    position: sticky;\n    display: flex;\n    margin-left: auto;\n}\n\n.p-scrolltop-enter-from {\n    opacity: 0;\n}\n\n.p-scrolltop-enter-active {\n    transition: opacity 0.15s;\n}\n\n.p-scrolltop.p-scrolltop-leave-to {\n    opacity: 0;\n}\n\n.p-scrolltop-leave-active {\n    transition: opacity 0.15s;\n}\n`;\n\nconst classes = {\n    root: ({ props }) => ['p-scrolltop', { 'p-scrolltop-sticky': props.target !== 'window' }],\n    icon: 'p-scrolltop-icon'\n};\n\nexport default BaseStyle.extend({\n    name: 'scrolltop',\n    theme,\n    classes\n});\n", "<script>\nimport BaseComponent from '@primevue/core/basecomponent';\nimport ScrollTopStyle from 'primevue/scrolltop/style';\n\nexport default {\n    name: 'BaseScrollTop',\n    extends: BaseComponent,\n    props: {\n        target: {\n            type: String,\n            default: 'window'\n        },\n        threshold: {\n            type: Number,\n            default: 400\n        },\n        icon: {\n            type: String,\n            default: undefined\n        },\n        behavior: {\n            type: String,\n            default: 'smooth'\n        },\n        buttonProps: {\n            type: Object,\n            default: () => {\n                return { rounded: true };\n            }\n        }\n    },\n    style: ScrollTopStyle,\n    provide() {\n        return {\n            $pcScrollTop: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <transition name=\"p-scrolltop\" appear @enter=\"onEnter\" @after-leave=\"onAfterLeave\" v-bind=\"ptm('transition')\">\n        <Button v-if=\"visible\" :ref=\"containerRef\" :class=\"cx('root')\" @click=\"onClick\" :aria-label=\"scrollTopAriaLabel\" :unstyled=\"unstyled\" v-bind=\"buttonProps\" :pt=\"rootPTOptions()\">\n            <template #icon=\"slotProps\">\n                <slot name=\"icon\" :class=\"cx('icon')\">\n                    <component :is=\"icon ? 'span' : 'ChevronUpIcon'\" :class=\"[cx('icon'), icon, slotProps.class]\" v-bind=\"iconPTOptions\" />\n                </slot>\n            </template>\n        </Button>\n    </transition>\n</template>\n\n<script>\nimport { DomHandler, ZIndexUtils } from '@primevue/core/utils';\nimport ChevronUpIcon from '@primevue/icons/chevronup';\nimport Button from 'primevue/button';\nimport { mergeProps } from 'vue';\nimport BaseScrollTop from './BaseScrollTop.vue';\n\nexport default {\n    name: 'ScrollTop',\n    extends: BaseScrollTop,\n    inheritAttrs: false,\n    scrollListener: null,\n    container: null,\n    data() {\n        return {\n            visible: false\n        };\n    },\n    mounted() {\n        if (this.target === 'window') this.bindDocumentScrollListener();\n        else if (this.target === 'parent') this.bindParentScrollListener();\n    },\n    beforeUnmount() {\n        if (this.target === 'window') this.unbindDocumentScrollListener();\n        else if (this.target === 'parent') this.unbindParentScrollListener();\n\n        if (this.container) {\n            ZIndexUtils.clear(this.container);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        onClick() {\n            let scrollElement = this.target === 'window' ? window : this.$el.parentElement;\n\n            scrollElement.scroll({\n                top: 0,\n                behavior: this.behavior\n            });\n        },\n        checkVisibility(scrollY) {\n            if (scrollY > this.threshold) this.visible = true;\n            else this.visible = false;\n        },\n        bindParentScrollListener() {\n            this.scrollListener = () => {\n                this.checkVisibility(this.$el.parentElement.scrollTop);\n            };\n\n            this.$el.parentElement.addEventListener('scroll', this.scrollListener);\n        },\n        bindDocumentScrollListener() {\n            this.scrollListener = () => {\n                this.checkVisibility(DomHandler.getWindowScrollTop());\n            };\n\n            window.addEventListener('scroll', this.scrollListener);\n        },\n        unbindParentScrollListener() {\n            if (this.scrollListener) {\n                this.$el.parentElement.removeEventListener('scroll', this.scrollListener);\n                this.scrollListener = null;\n            }\n        },\n        unbindDocumentScrollListener() {\n            if (this.scrollListener) {\n                window.removeEventListener('scroll', this.scrollListener);\n                this.scrollListener = null;\n            }\n        },\n        onEnter(el) {\n            ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n        },\n        onAfterLeave(el) {\n            ZIndexUtils.clear(el);\n        },\n        containerRef(el) {\n            this.container = el ? el.$el : undefined;\n        },\n        rootPTOptions() {\n            return mergeProps(this.ptmi('root'), this.ptm('button'));\n        },\n        iconPTOptions() {\n            return mergeProps(this.ptmi('root')['icon'], this.ptm('button')['icon']);\n        }\n    },\n    computed: {\n        scrollTopAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.scrollTop : undefined;\n        }\n    },\n    components: {\n        ChevronUpIcon,\n        Button\n    }\n};\n</script>\n", "<template>\n    <transition name=\"p-scrolltop\" appear @enter=\"onEnter\" @after-leave=\"onAfterLeave\" v-bind=\"ptm('transition')\">\n        <Button v-if=\"visible\" :ref=\"containerRef\" :class=\"cx('root')\" @click=\"onClick\" :aria-label=\"scrollTopAriaLabel\" :unstyled=\"unstyled\" v-bind=\"buttonProps\" :pt=\"rootPTOptions()\">\n            <template #icon=\"slotProps\">\n                <slot name=\"icon\" :class=\"cx('icon')\">\n                    <component :is=\"icon ? 'span' : 'ChevronUpIcon'\" :class=\"[cx('icon'), icon, slotProps.class]\" v-bind=\"iconPTOptions\" />\n                </slot>\n            </template>\n        </Button>\n    </transition>\n</template>\n\n<script>\nimport { DomHandler, ZIndexUtils } from '@primevue/core/utils';\nimport ChevronUpIcon from '@primevue/icons/chevronup';\nimport Button from 'primevue/button';\nimport { mergeProps } from 'vue';\nimport BaseScrollTop from './BaseScrollTop.vue';\n\nexport default {\n    name: 'ScrollTop',\n    extends: BaseScrollTop,\n    inheritAttrs: false,\n    scrollListener: null,\n    container: null,\n    data() {\n        return {\n            visible: false\n        };\n    },\n    mounted() {\n        if (this.target === 'window') this.bindDocumentScrollListener();\n        else if (this.target === 'parent') this.bindParentScrollListener();\n    },\n    beforeUnmount() {\n        if (this.target === 'window') this.unbindDocumentScrollListener();\n        else if (this.target === 'parent') this.unbindParentScrollListener();\n\n        if (this.container) {\n            ZIndexUtils.clear(this.container);\n            this.overlay = null;\n        }\n    },\n    methods: {\n        onClick() {\n            let scrollElement = this.target === 'window' ? window : this.$el.parentElement;\n\n            scrollElement.scroll({\n                top: 0,\n                behavior: this.behavior\n            });\n        },\n        checkVisibility(scrollY) {\n            if (scrollY > this.threshold) this.visible = true;\n            else this.visible = false;\n        },\n        bindParentScrollListener() {\n            this.scrollListener = () => {\n                this.checkVisibility(this.$el.parentElement.scrollTop);\n            };\n\n            this.$el.parentElement.addEventListener('scroll', this.scrollListener);\n        },\n        bindDocumentScrollListener() {\n            this.scrollListener = () => {\n                this.checkVisibility(DomHandler.getWindowScrollTop());\n            };\n\n            window.addEventListener('scroll', this.scrollListener);\n        },\n        unbindParentScrollListener() {\n            if (this.scrollListener) {\n                this.$el.parentElement.removeEventListener('scroll', this.scrollListener);\n                this.scrollListener = null;\n            }\n        },\n        unbindDocumentScrollListener() {\n            if (this.scrollListener) {\n                window.removeEventListener('scroll', this.scrollListener);\n                this.scrollListener = null;\n            }\n        },\n        onEnter(el) {\n            ZIndexUtils.set('overlay', el, this.$primevue.config.zIndex.overlay);\n        },\n        onAfterLeave(el) {\n            ZIndexUtils.clear(el);\n        },\n        containerRef(el) {\n            this.container = el ? el.$el : undefined;\n        },\n        rootPTOptions() {\n            return mergeProps(this.ptmi('root'), this.ptm('button'));\n        },\n        iconPTOptions() {\n            return mergeProps(this.ptmi('root')['icon'], this.ptm('button')['icon']);\n        }\n    },\n    computed: {\n        scrollTopAriaLabel() {\n            return this.$primevue.config.locale.aria ? this.$primevue.config.locale.aria.scrollTop : undefined;\n        }\n    },\n    components: {\n        ChevronUpIcon,\n        Button\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["theme", "_ref", "dt", "classes", "root", "_ref2", "props", "target", "icon", "BaseStyle", "extend", "name", "name", "BaseComponent", "props", "target", "type", "String", "threshold", "Number", "icon", "undefined", "behavior", "buttonProps", "Object", "_default", "rounded", "style", "ScrollTopStyle", "provide", "$pcScrollTop", "$parentInstance", "script", "BaseScrollTop", "inheritAttrs", "scrollListener", "container", "data", "visible", "mounted", "bindDocumentScrollListener", "bindParentScrollListener", "beforeUnmount", "unbindDocumentScrollListener", "unbindParentScrollListener", "ZIndexUtils", "clear", "overlay", "methods", "onClick", "scrollElement", "window", "$el", "parentElement", "scroll", "top", "checkVisibility", "scrollY", "_this", "scrollTop", "addEventListener", "_this2", "DomHandler", "getWindowScrollTop", "removeEventListener", "onEnter", "el", "set", "$primevue", "config", "zIndex", "onAfterLeave", "containerRef", "rootPTOptions", "mergeProps", "ptmi", "ptm", "iconPTOptions", "computed", "scrollTopAriaLabel", "locale", "aria", "components", "ChevronUpIcon", "Button", "_openBlock", "_createBlock", "_Transition", "_mergeProps", "appear", "$options", "_ctx", "$data", "_component_Button", "ref", "cx", "unstyled", "pt", "_withCtx", "slotProps", "_renderSlot", "$slots", "_resolveDynamicComponent"]
}
