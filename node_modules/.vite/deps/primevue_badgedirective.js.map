{
  "version": 3,
  "sources": ["../../src/badgedirective/style/BadgeDirectiveStyle.js", "../../src/badgedirective/BaseBadgeDirective.js", "../../src/badgedirective/BadgeDirective.js"],
  "sourcesContent": ["import BaseStyle from '@primevue/core/base/style';\n\nconst classes = {\n    root: 'p-badge p-component'\n};\n\nexport default BaseStyle.extend({\n    name: 'badge-directive',\n    classes\n});\n", "import BaseDirective from '@primevue/core/basedirective';\nimport BadgeDirectiveStyle from 'primevue/badgedirective/style';\n\nconst BaseBadgeDirective = BaseDirective.extend({\n    style: BadgeDirectiveStyle\n});\n\nexport default BaseBadgeDirective;\n", "import { DomHandler, UniqueComponentId } from '@primevue/core/utils';\nimport BaseBadgeDirective from './BaseBadgeDirective';\n\nconst BadgeDirective = BaseBadgeDirective.extend('badge', {\n    mounted(el, binding) {\n        console.warn('Deprecated since v4. Use OverlayBadge component instead.');\n        const id = UniqueComponentId() + '_badge';\n\n        const badge = DomHandler.createElement('span', {\n            id,\n            class: !this.isUnstyled() && this.cx('root'),\n            [this.$attrSelector]: '',\n            'p-bind': this.ptm('root', {\n                context: {\n                    ...binding.modifiers,\n                    nogutter: String(binding.value).length === 1,\n                    dot: binding.value == null\n                }\n            })\n        });\n\n        el.$_pbadgeId = badge.getAttribute('id');\n\n        for (let modifier in binding.modifiers) {\n            !this.isUnstyled() && DomHandler.addClass(badge, 'p-badge-' + modifier);\n        }\n\n        if (binding.value != null) {\n            if (typeof binding.value === 'object') el.$_badgeValue = binding.value.value;\n            else el.$_badgeValue = binding.value;\n            badge.appendChild(document.createTextNode(el.$_badgeValue));\n\n            if (String(el.$_badgeValue).length === 1 && !this.isUnstyled()) {\n                !this.isUnstyled() && DomHandler.addClass(badge, 'p-badge-circle');\n            }\n        } else {\n            !this.isUnstyled() && DomHandler.addClass(badge, 'p-badge-dot');\n        }\n\n        el.setAttribute('data-pd-badge', true);\n        !this.isUnstyled() && DomHandler.addClass(el, 'p-overlay-badge');\n        el.setAttribute('data-p-overlay-badge', 'true');\n        el.appendChild(badge);\n\n        this.$el = badge;\n    },\n    updated(el, binding) {\n        !this.isUnstyled() && DomHandler.addClass(el, 'p-overlay-badge');\n        el.setAttribute('data-p-overlay-badge', 'true');\n\n        if (binding.oldValue !== binding.value) {\n            let badge = document.getElementById(el.$_pbadgeId);\n\n            if (typeof binding.value === 'object') el.$_badgeValue = binding.value.value;\n            else el.$_badgeValue = binding.value;\n\n            if (!this.isUnstyled()) {\n                if (el.$_badgeValue) {\n                    if (DomHandler.hasClass(badge, 'p-badge-dot')) DomHandler.removeClass(badge, 'p-badge-dot');\n\n                    if (el.$_badgeValue.length === 1) DomHandler.addClass(badge, 'p-badge-circle');\n                    else DomHandler.removeClass(badge, 'p-badge-circle');\n                } else if (!el.$_badgeValue && !DomHandler.hasClass(badge, 'p-badge-dot')) {\n                    DomHandler.addClass(badge, 'p-badge-dot');\n                }\n            }\n\n            badge.innerHTML = '';\n            badge.appendChild(document.createTextNode(el.$_badgeValue));\n        }\n    }\n});\n\nexport default BadgeDirective;\n"],
  "mappings": "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",
  "names": ["classes", "root", "BaseStyle", "extend", "name", "BaseBadgeDirective", "BaseDirective", "extend", "style", "BadgeDirectiveStyle", "BadgeDirective", "mounted", "el", "binding", "console", "warn", "id", "UniqueComponentId", "badge", "DomHandler", "createElement", "_defineProperty", "isUnstyled", "cx", "$attrSelector", "ptm", "context", "_objectSpread", "modifiers", "nogutter", "String", "value", "length", "dot", "$_pbadgeId", "getAttribute", "modifier", "addClass", "_typeof", "$_badgeValue", "appendChild", "document", "createTextNode", "setAttribute", "$el", "updated", "oldValue", "getElementById", "hasClass", "removeClass", "innerHTML"]
}
